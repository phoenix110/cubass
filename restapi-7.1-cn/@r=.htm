<!doctype html><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><!-- saved from url=(0058)https://s0doc0cuba-platform0com.icopy.site/restapi-7.1/?r= -->
<html lang="en"><head>
<meta charset="UTF-8">
<!--[if IE]><meta http-equiv="X-UA-Compatible" content="IE=edge"><![endif]-->
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 1.5.8">
<title>CUBA REST API 教程,文档,官方文档,中文文档,中文</title>
<link rel="stylesheet" href="styles/cuba.css">
<link rel="stylesheet" href="styles/coderay-asciidoctor.css">
<script src="../../https@s0doc0cuba-platform0com.icopy.site\restapi-7.1\js\jquery-1.11.1.min.js"></script>
<meta name="keywords" content="CUBA REST API 教程,文档,官方文档,中文文档,中文教程,文档,官方文档"><meta name="description" content="CUBA REST API 教程,文档,官方文档,中文文档,中文教程,文档,官方文档"><script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "../../https@hm.baidu.com\hm.js@8a27e3605ed022be32b28b2c9478a17f";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
var _mtac = {};
  	(function() {
  		var mta = document.createElement("script");
  		mta.src = "//pingjs.qq.com/h5/stats.js?v2.0.4";
  		mta.setAttribute("name", "MTAH5");
  		mta.setAttribute("sid", "500683764");

  		var s = document.getElementsByTagName("script")[0];
  		s.parentNode.insertBefore(mta, s);
  	})();</script>
<script>
(function(){
    var bp = document.createElement('script');
    var curProtocol = window.location.protocol.split(':')[0];
    if (curProtocol === 'https') {
        bp.src = '../../https@zz.bdstatic.com\linksubmit\push.js';
    }
    else {
        bp.src = '../../push.zhanzhang.baidu.com/push.js';
    }
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(bp, s);
})();
</script>
<script async src="../../https@pagead2.googlesyndication.com\pagead\js\f.txt"></script>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({
        google_ad_client: "ca-pub-6890694312814945",
        enable_page_level_ads: true
    });
</script><script async src="../../https@www.googletagmanager.com\gtag\js@id=ua-15172585-4"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-15172585-4');
</script>
</head>
<body class="book toc2 toc-left">
<div id="header">
<h1>CUBA REST API</h1>
<div class="details">
<span id="revnumber" title="version 7.1">版本7.1</span>
<br><span id="revremark" title="copyright%20%28c%29%202019%20haulmont%20%28www.haulmont.com%29">版权所有（c）2019豪尔蒙（www.haulmont.com）</span>
</div>
<div id="toc" class="toc2">
<div id="toctitle" title="Table of contents">目录</div>
<ul class="sectlevel1">
<li><a href="#overview" title="1. Overview">1.概述</a></li>
<li><a href="#getting_started" title="2. Getting Started">2.入门</a></li>
<li><a href="#features" title="3. Features">3.特点</a>
<ul class="sectlevel2">
<li><a href="#rest_api_v2_queries_config" title="3.1. Predefined JPQL Queries Configuration"> 3.1.  预定义的JPQL查询配置</a></li>
<li><a href="#rest_api_v2_services_config" title="3.2. Services Configuration"> 3.2.  服务配置</a></li>
<li><a href="#rest_api_v2_data_model_versioning" title="3.3. Data Model Versioning"> 3.3.  数据模型版本控制</a></li>
<li><a href="#rest_api_v2_cors" title="3.4. CORS Settings"> 3.4.  CORS设置</a></li>
<li><a href="#rest_api_v2_anonymous" title="3.5. Anonymous Access"> 3.5.  匿名访问</a></li>
<li><a href="#rest_api_v2_settings" title="3.6. Other REST API Settings"> 3.6.  其他REST API设置</a></li>
<li><a href="#rest_api_v2_custom_controllers" title="3.7. Creating Custom OAuth2 Protected Controllers"> 3.7.  创建自定义OAuth2受保护的控制器</a></li>
<li><a href="#rest_api_v2_security_constraints" title="3.8. Security Constraints for Collection Attributes"> 3.8.  集合属性的安全性约束</a></li>
<li><a href="#rest_api_v2_persistent_token_store" title="3.9. Persistent Token Store"> 3.9.  永久令牌存储</a></li>
<li><a href="#rest_swagger" title="3.10. Project-specific Swagger Documentation"> 3.10.  特定于项目的Swagger文档</a></li>
</ul>
</li>
<li><a href="#usage_example" title="4. Using REST API">4.使用REST API</a>
<ul class="sectlevel2">
<li><a href="#rest_api_v2_ex_get_token" title="4.1. Getting an OAuth Token"> 4.1.  获取OAuth令牌</a></li>
<li><a href="#rest_api_v2_ldap" title="4.2. REST API Authentication with LDAP"> 4.2.  LDAP的REST API身份验证</a></li>
<li><a href="#rest_api_v2_custom_auth" title="4.3. Custom Authentication"> 4.3.  自订验证</a>
<ul class="sectlevel3">
<li><a href="#rest_api_v2_social_login" title="4.3.1. Social Login in REST API"> 4.3.1.  REST API中的社交登录</a></li>
</ul>
</li>
<li><a href="#rest_api_v2_ex_get_entities_list" title="4.4. Getting an Entity Instances List"> 4.4.  获取实体实例列表</a></li>
<li><a href="#rest_api_v2_ex_create_entity" title="4.5. New Entity Instance Creation"> 4.5.  新实体实例创建</a></li>
<li><a href="#rest_api_v2_ex_update_entity" title="4.6. Existing Entity Instance Update"> 4.6.  现有实体实例更新</a></li>
<li><a href="#rest_api_v2_ex_query_get" title="4.7. Executing a JPQL Query (GET)"> 4.7.  执行JPQL查询（GET）</a></li>
<li><a href="#rest_api_v2_ex_query_post" title="4.8. Executing a JPQL Query (POST)"> 4.8.  执行JPQL查询（POST）</a></li>
<li><a href="#rest_api_v2_ex_service_get" title="4.9. Service Method Invocation (GET)"> 4.9.  服务方法调用（GET）</a></li>
<li><a href="#rest_api_v2_ex_service_post" title="4.10. Service Method Invocation (POST)"> 4.10.  服务方法调用（POST）</a></li>
<li><a href="#rest_api_v2_ex_file_download" title="4.11. Files Downloading"> 4.11.  文件下载</a></li>
<li><a href="#rest_api_v2_ex_file_upload" title="4.12. Files Uploading"> 4.12.  文件上传</a></li>
<li><a href="#rest_api_v2_ex_javascript_usage" title="4.13. JavaScript Usage Example"> 4.13.  JavaScript用法示例</a></li>
<li><a href="#rest_api_v2_ex_localized_messages" title="4.14. Getting Localized Messages"> 4.14.  获取本地化消息</a></li>
<li><a href="#rest_api_v2_ex_json_transformations" title="4.15. Data Model Versioning Example"> 4.15.  数据模型版本化示例</a></li>
<li><a href="#rest_api_v2_ex_search_filter" title="4.16. Using Entities Search Filter"> 4.16.  使用实体搜索过滤器</a></li>
</ul>
</li>
<li><a href="#app_properties" title="Appendix A: Application Properties">附录A：应用程序属性</a></li>
</ul>
</div>
</div>
<div id="content">
<div class="sect1">
<h2 id="overview"><a class="anchor" href="#overview"></a><a class="link" href="#overview">1. Overview</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p title="The add-on provides a universal REST API with the following functionality:">该插件提供了具有以下功能的通用REST API：</p>
</div>
<div class="ulist">
<ul>
<li>
<p title="CRUD operations on entities.">对实体的CRUD操作.</p>
</li>
<li>
<p title="Execution of predefined JPQL queries.">执行预定义的JPQL查询.</p>
</li>
<li>
<p title="Execution of service methods.">服务方法的执行.</p>
</li>
<li>
<p>Getting metadata (entities, views, enumerations, datatypes).</p>
</li>
<li>
<p title="Getting current user permissions (access to entities, attributes, specific permissions).">获取当前用户权限（访问实体，属性，特定权限）.</p>
</li>
<li>
<p title="Getting current user information (name, language, time zone, etc.).">获取当前的用户信息（名称，语言，时区等）.</p>
</li>
<li>
<p title="Uploading and downloading files.">上载和下载文件.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p title="REST API uses the OAuth2 protocol for authentication and supports anonymous access.">REST API使用OAuth2协议进行身份验证，并支持匿名访问.</p>
</div>
<div class="paragraph">
<p title="All REST API endpoints work with data according to the authenticated user permissions set in security subsystem .">所有REST API端点都根据<a href="../manual-7.1/security_subsystem.html" replaced="yes">安全子系统中</a>设置的经过身份验证的用户权限来处理数据.</p>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
<div class="paragraph">
<p title="The detailed documentation on the API endpoints is published at http://files.cuba-platform.com/swagger/7.1 .">有关API端点的详细文档，发布在<a href="../../files.cuba-platform.com/swagger/7.1" class="bare">http://files.cuba-platform.com/swagger/7.1</a> .</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect1">
<script async src="../../https@pagead2.googlesyndication.com\pagead\js\f.txt"></script>
<ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6890694312814945" data-ad-slot="3716282951"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script><h2 id="getting_started"><a class="anchor" href="#getting_started"></a><a class="link" href="#getting_started">2. Getting Started</a></h2>
<div class="sectionbody">
<div class="dlist">
<dl>
<dt class="hdlist1">Installation</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p title="If you are using Studio 11+, open the CUBA > Marketplace main menu item, then find and install the REST API add-on.">如果您使用的是Studio 11+，请打开<strong>CUBA&gt; Marketplace</strong>主菜单项，然后查找并安装<strong>REST API</strong>插件.</p>
</li>
<li>
<p title="Otherwise, see Using Public Add-ons documentation for how to install the add-on using its coordinates in the repository. The coordinates can be copied from the add-on page at Marketplace ."> 否则，请参阅《 <a href="../manual-7.1/app_components_usage.html" replaced="yes">使用公共加载项》</a>文档，以了解如何使用存储库中的坐标安装加载项.  可以从<a href="../../https@www.cuba-platform.com/marketplace">Marketplace</a>的附加页面复制坐标.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Keep in mind that the add-on is built only for the framework version 7.1 and above. In the earlier versions, REST API was included in the core framework.</p>
</div>
</div>
</div>
</dd>
<dt class="hdlist1">Testing basic functionality</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p title="In Studio, you should see the REST element in the CUBA project tree after Gradle refresh is completed.">在Studio中，Gradle刷新完成后，您应该在CUBA项目树中看到<strong>REST</strong>元素.</p>
</li>
<li>
<p title="Start the application and test the REST API using curl command line tool:">启动应用程序并使用<code>curl</code>命令行工具测试REST API：</p>
<div class="olist arabic">
<ol class="arabic">
<li>
<p title="Request OAuth token:">请求OAuth令牌：</p>
<div class="listingblock">
<div class="content">
<pre>curl -X POST \
  http://localhost:8080/app/rest/v2/oauth/token \
  -H 'Authorization: Basic Y2xpZW50OnNlY3JldA==' \
  -H 'Content-Type: application/x-www-form-urlencoded' \
  -d 'grant_type=password&amp;username=admin&amp;password=admin'</pre>
</div>
</div>
<div class="paragraph">
<p title="You will get a JSON response with some access_token value. Use it for further requests in the Authorization header."> 您将获得带有一些<code>access_token</code>值的JSON响应.  将其用于<code>Authorization</code>标头中的其他请求.</p>
</div>
</li>
<li>
<p title="Request the list of roles (replace <access_token> with the value obtained on the previous step):">请求角色列表（将<code>&lt;access_token&gt;</code>替换为在上一步中获得的值）：</p>
<div class="listingblock">
<div class="content">
<pre>  curl -X GET \
  'http://localhost:8080/app/rest/v2/entities/sec$Role' \
  -H 'Authorization: Bearer &lt;access_token&gt;'</pre>
</div>
</div>
<div class="paragraph">
<p title="The response will contain all registered roles, provided that the user for which the token was obtained has permissions to read the sec$Role entity.">响应将包含所有注册的角色，前提是已为其获取令牌的用户有权读取<code>sec$Role</code>实体.</p>
</div>
</li>
</ol>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd>
</dl>
</div>
</div>
</div>
<div class="sect1">
<h2 id="features"><a class="anchor" href="#features"></a><a class="link" href="#features">3. Features</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p title="This section covers the REST API features and configuration options. For practical usage examples, see the next section."> 本节介绍REST API功能和配置选项.  对于实际使用示例，请参阅<a href="#usage_example">下一个</a>章节.</p>
</div>
<div class="sect2">
<h3 id="rest_api_v2_queries_config"><a class="anchor" href="#rest_api_v2_queries_config"></a><a class="link" href="#rest_api_v2_queries_config">3.1. Predefined JPQL Queries Configuration</a></h3>
<div class="paragraph">
<p title="In the CUBA application, predefined JPQL queries must be specified in files registered in the cuba.rest.queriesConfig application property of the web or portal module (e.g in the web-app.properties file ):">在CUBA应用程序中，必须在<strong>Web</strong>或<strong>门户网站</strong>模块的<a href="#cuba.rest.queriesConfig">cuba.rest.queriesConfig</a>应用程序属性中注册的文件中指定预定义的JPQL查询（例如，在<code>web-app.properties file</code> ）：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="properties">cuba.rest.queriesConfig = +com/company/myapp/rest-queries.xml</code></pre>
</div>
</div>
<div class="paragraph">
<p title="The rest-queries.xml file must be placed in the root package of the web or portal module (e.g. com.company.myapp ). Its content is defined by the rest-queries.xsd schema, for example:"> 必须将<code>rest-queries.xml</code>文件放置在<strong>Web</strong>或<strong>门户</strong>模块的根包中（例如<code>com.company.myapp</code> ）.  它的内容由<a href="../../schemas.haulmont.com/cuba/7.1/rest-queries.xsd">rest-queries.xsd</a>模式定义，例如：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="preprocessor">&lt;?xml version="1.0"?&gt;</span>
<span class="tag">&lt;queries</span> <span class="attribute-name">xmlns</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://schemas.haulmont.com/cuba/rest-queries.xsd</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;query</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">carByVin</span><span class="delimiter">"</span></span> <span class="attribute-name">entity</span>=<span class="string"><span class="delimiter">"</span><span class="content">sample$Car</span><span class="delimiter">"</span></span> <span class="attribute-name">view</span>=<span class="string"><span class="delimiter">"</span><span class="content">carEdit</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;jpql&gt;</span><span class="inline-delimiter">&lt;![CDATA[</span>select c from sample$Car c where c.vin = :vin<span class="inline-delimiter">]]&gt;</span><span class="tag">&lt;/jpql&gt;</span>
        <span class="tag">&lt;params&gt;</span>
            <span class="tag">&lt;param</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">vin</span><span class="delimiter">"</span></span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">"</span><span class="content">java.lang.String</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;/params&gt;</span>
    <span class="tag">&lt;/query&gt;</span>
    <span class="tag">&lt;query</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">allColours</span><span class="delimiter">"</span></span> <span class="attribute-name">entity</span>=<span class="string"><span class="delimiter">"</span><span class="content">sample$Colour</span><span class="delimiter">"</span></span> <span class="attribute-name">view</span>=<span class="string"><span class="delimiter">"</span><span class="content">_local</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;jpql&gt;</span><span class="inline-delimiter">&lt;![CDATA[</span>select u from sample$Colour u order by u.name<span class="inline-delimiter">]]&gt;</span><span class="tag">&lt;/jpql&gt;</span>
    <span class="tag">&lt;/query&gt;</span>
    <span class="tag">&lt;query</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">carsByIds</span><span class="delimiter">"</span></span> <span class="attribute-name">entity</span>=<span class="string"><span class="delimiter">"</span><span class="content">sample$Car</span><span class="delimiter">"</span></span> <span class="attribute-name">view</span>=<span class="string"><span class="delimiter">"</span><span class="content">carEdit</span><span class="delimiter">"</span></span> <span class="attribute-name">cacheable</span>=<span class="string"><span class="delimiter">"</span><span class="content">true</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;jpql&gt;</span><span class="inline-delimiter">&lt;![CDATA[</span>select c from sample$Car c where c.id in :ids<span class="inline-delimiter">]]&gt;</span><span class="tag">&lt;/jpql&gt;</span>
        <span class="tag">&lt;params&gt;</span>
            <span class="tag">&lt;param</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">ids</span><span class="delimiter">"</span></span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">"</span><span class="content">java.util.UUID[]</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;/params&gt;</span>
    <span class="tag">&lt;/query&gt;</span>
    <span class="tag">&lt;query</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">myOrders</span><span class="delimiter">"</span></span> <span class="attribute-name">entity</span>=<span class="string"><span class="delimiter">"</span><span class="content">sample$Order</span><span class="delimiter">"</span></span> <span class="attribute-name">view</span>=<span class="string"><span class="delimiter">"</span><span class="content">orderBrowse</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;jpql&gt;</span><span class="inline-delimiter">&lt;![CDATA[</span>select o from sample$Order o where o.createdBy = :session$userLogin<span class="inline-delimiter">]]&gt;</span><span class="tag">&lt;/jpql&gt;</span>
    <span class="tag">&lt;/query&gt;</span>
<span class="tag">&lt;/queries&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p title="An example of how to configure and execute a query can be found in the Executing a JPQL Query (GET) and Executing a JPQL Query (POST) chapter.">有关如何配置和执行查询的示例，请参见<a href="#rest_api_v2_ex_query_get">执行JPQL查询（GET）</a>和<a href="#rest_api_v2_ex_query_post">执行JPQL查询（POST）</a>一章.</p>
</div>
<div class="paragraph">
<p title="The platform also provides the predefined all query for getting all instances of a specified entity type. It can be used with /count to receive the total number of entity instances, for example:"> 该平台还提供预定义的<code>all</code>查询，以获取指定实体类型的所有实例.  它可以与<code>/count</code>一起使用，以接收实体实例的总数，例如：</p>
</div>
<div class="literalblock">
<div class="content">
<pre>http://localhost:8080/app/rest/v2/queries/sales$Order/all/count</pre>
</div>
</div>
<div class="paragraph">
<p title="The query element can have the cacheable attribute that enables caching of the query."><code>query</code>元素可以具有启用<a href="#entity_cache">缓存</a>的<code>cacheable</code>属性.</p>
</div>
<div class="paragraph">
<p title="A query can contain predefined parameters that take the values of the current user id and login: session$userId and session$userLogin . You don’t have to declare them in the params element (see the example above)."> 查询可以包含预定义参数，这些参数采用当前用户标识和登录名的值： <code>session$userId</code>和<code>session$userLogin</code> .  您不必在<code>params</code>元素中声明它们（请参见上面的示例）.</p>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_services_config"><a class="anchor" href="#rest_api_v2_services_config"></a><a class="link" href="#rest_api_v2_services_config">3.2. Services Configuration</a></h3>
<div class="paragraph">
<p title="The list of service methods that are available via the REST API must be configured in the CUBA application in files registered in the cuba.rest.servicesConfig application property of the web or portal module (e.g in the web-app.properties file ):">通过REST API可用的服务方法列表必须在CUBA应用程序中的<strong>Web</strong>或<strong>门户网站</strong>模块的<a href="#cuba.rest.servicesConfig">cuba.rest.servicesConfig</a>应用程序属性中注册的文件中配置（例如，在<code>web-app.properties file</code> ）：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="properties">cuba.rest.servicesConfig = +com/company/myapp/rest-services.xml</code></pre>
</div>
</div>
<div class="paragraph">
<p title="The content of the rest-services.xml must be placed in the root package of the web or portal module (e.g. com.company.myapp ). Its content is defined by the rest-services-v2.xsd schema, for example:"> <code>rest-services.xml</code>的内容必须放在<strong>Web</strong>或<strong>门户</strong>模块的根包中（例如<code>com.company.myapp</code> ）.  它的内容由<a href="../../schemas.haulmont.com/cuba/7.1/rest-services-v2.xsd">rest-services-v2.xsd</a>模式定义，例如：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="preprocessor">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="tag">&lt;services</span> <span class="attribute-name">xmlns</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://schemas.haulmont.com/cuba/rest-services-v2.xsd</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;service</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">myapp_SomeService</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;method</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">sum</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
            <span class="tag">&lt;param</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">number1</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
            <span class="tag">&lt;param</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">number2</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;/method&gt;</span>
        <span class="tag">&lt;method</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">emptyMethod</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;method</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">overloadedMethod</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
            <span class="tag">&lt;param</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">intParam</span><span class="delimiter">"</span></span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">"</span><span class="content">int</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;/method&gt;</span>
        <span class="tag">&lt;method</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">overloadedMethod</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
            <span class="tag">&lt;param</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">stringParam</span><span class="delimiter">"</span></span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">"</span><span class="content">java.lang.String</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;/method&gt;</span>
    <span class="tag">&lt;/service&gt;</span>
<span class="tag">&lt;/services&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Method parameter types can be omitted if the service doesn’t contain an overloaded method with the same number of parameters. Otherwise, types must be defined.</p>
</div>
<div class="paragraph">
<p title="An example of how to configure and invoke a service can be found in the Service Method Invocation (GET) chapter.">有关如何配置和调用服务的示例，请参见" <a href="#rest_api_v2_ex_service_get">服务方法调用（GET）"</a>一章.</p>
</div>
<div class="paragraph">
<p title="If some service method needs to be invoked without authentication even when the anonymous access to the REST API is disabled, then this method may be marked with the anonymousAllowed=&quot;true&quot; attribute in the services configuration file:">如果即使禁用了对REST API的<a href="#rest_api_v2_anonymous">匿名访问</a> ，也需要在没有身份验证的情况下调用某些服务方法，则可以在服务配置文件中将该方法标记为<code>anonymousAllowed="true"</code>属性：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="preprocessor">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="tag">&lt;services</span> <span class="attribute-name">xmlns</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://schemas.haulmont.com/cuba/rest-services-v2.xsd</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;service</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">myapp_SomeService</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;method</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">sum</span><span class="delimiter">"</span></span> <span class="attribute-name">anonymousAllowed</span>=<span class="string"><span class="delimiter">"</span><span class="content">true</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
            <span class="tag">&lt;param</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">number1</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
            <span class="tag">&lt;param</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">number2</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;/method&gt;</span>
    <span class="tag">&lt;/service&gt;</span>
<span class="tag">&lt;/services&gt;</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_data_model_versioning"><a class="anchor" href="#rest_api_v2_data_model_versioning"></a><a class="link" href="#rest_api_v2_data_model_versioning">3.3. Data Model Versioning</a></h3>
<div class="paragraph">
<p title="REST API can handle data model changes. It is useful when, for example, some entity attribute was renamed, but REST API client doesn’t know about this modification and expects the attribute to have an old name."> REST API可以处理数据模型更改.  例如，当某些实体属性被重命名，但是REST API客户端不知道此修改，并且期望该属性具有旧名称时，此功能很有用.</p>
</div>
<div class="paragraph">
<p title="For such cases REST API allows you to define transformation rules for entities JSON. If the client application sends the data model version in the request query parameter then the JSON in REST API method response or request body will be transformed according to transformation rules defined for that particular domain model version."> 在这种情况下，REST API允许您为实体JSON定义转换规则.  如果客户端应用程序在请求查询参数中发送了数据模型版本，则REST API方法响应或请求主体中的JSON将根据为该特定域模型版本定义的转换规则进行转换.</p>
</div>
<div class="paragraph">
<p title="JSON transformation rules must be specified in files registered in cuba.rest.jsonTransformationConfig application property of the web or portal module (e.g in the web-app.properties file):">必须在<strong>Web</strong>或<strong>门户网站</strong>模块的<a href="#cuba.rest.jsonTransformationConfig">cuba.rest.jsonTransformationConfig</a>应用程序属性中注册的文件中指定JSON转换规则（例如，在<code>web-app.properties</code>文件中）：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="properties">cuba.rest.jsonTransformationConfig = +com/company/myapp/rest-json-transformations.xml</code></pre>
</div>
</div>
<div class="paragraph">
<p title="The rest-json-transformations.xml file must be placed in the web or portal module (e.g. in package com.company.myapp ). Its content is defined by the {xsd_url}/rest-json-transformations.xsd[rest-json-transformations.xsd] schema. File example:"> 必须将<code>rest-json-transformations.xml</code>文件放置在<strong>Web</strong>或<strong>门户</strong>模块中（例如，在<code>com.company.myapp</code>包<code>com.company.myapp</code> ）.  其内容由{xsd_url} /rest-json-transformations.xsd [rest-json-transformations.xsd]模式定义.  文件示例：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="preprocessor">&lt;?xml version="1.0"?&gt;</span>
<span class="tag">&lt;transformations</span> <span class="attribute-name">xmlns</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://schemas.haulmont.com/cuba/rest-json-transformations.xsd</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>

    <span class="tag">&lt;transformation</span> <span class="attribute-name">modelVersion</span>=<span class="string"><span class="delimiter">"</span><span class="content">1.0</span><span class="delimiter">"</span></span> <span class="attribute-name">oldEntityName</span>=<span class="string"><span class="delimiter">"</span><span class="content">sales$OldOrder</span><span class="delimiter">"</span></span> <span class="attribute-name">currentEntityName</span>=<span class="string"><span class="delimiter">"</span><span class="content">sales$NewOrder</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;renameAttribute</span> <span class="attribute-name">oldName</span>=<span class="string"><span class="delimiter">"</span><span class="content">oldNumber</span><span class="delimiter">"</span></span> <span class="attribute-name">currentName</span>=<span class="string"><span class="delimiter">"</span><span class="content">number</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;renameAttribute</span> <span class="attribute-name">oldName</span>=<span class="string"><span class="delimiter">"</span><span class="content">date</span><span class="delimiter">"</span></span> <span class="attribute-name">currentName</span>=<span class="string"><span class="delimiter">"</span><span class="content">deliveryDate</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;toVersion&gt;</span>
            <span class="tag">&lt;removeAttribute</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">discount</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;/toVersion&gt;</span>
    <span class="tag">&lt;/transformation&gt;</span>

    <span class="tag">&lt;transformation</span> <span class="attribute-name">modelVersion</span>=<span class="string"><span class="delimiter">"</span><span class="content">1.0</span><span class="delimiter">"</span></span> <span class="attribute-name">currentEntityName</span>=<span class="string"><span class="delimiter">"</span><span class="content">sales$Contractor</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;renameAttribute</span> <span class="attribute-name">oldName</span>=<span class="string"><span class="delimiter">"</span><span class="content">summary</span><span class="delimiter">"</span></span> <span class="attribute-name">currentName</span>=<span class="string"><span class="delimiter">"</span><span class="content">total</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;renameAttribute</span> <span class="attribute-name">oldName</span>=<span class="string"><span class="delimiter">"</span><span class="content">familyName</span><span class="delimiter">"</span></span> <span class="attribute-name">currentName</span>=<span class="string"><span class="delimiter">"</span><span class="content">lastName</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;fromVersion&gt;</span>
            <span class="tag">&lt;removeAttribute</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">city</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
            <span class="tag">&lt;removeAttribute</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">country</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;/fromVersion&gt;</span>
        <span class="tag">&lt;toVersion&gt;</span>
            <span class="tag">&lt;removeAttribute</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">phone</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;/toVersion&gt;</span>
    <span class="tag">&lt;/transformation&gt;</span>

    <span class="tag">&lt;transformation</span> <span class="attribute-name">modelVersion</span>=<span class="string"><span class="delimiter">"</span><span class="content">1.1</span><span class="delimiter">"</span></span> <span class="attribute-name">currentEntityName</span>=<span class="string"><span class="delimiter">"</span><span class="content">sales$NewOrder</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;renameAttribute</span> <span class="attribute-name">oldName</span>=<span class="string"><span class="delimiter">"</span><span class="content">date</span><span class="delimiter">"</span></span> <span class="attribute-name">currentName</span>=<span class="string"><span class="delimiter">"</span><span class="content">deliveryDate</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
    <span class="tag">&lt;/transformation&gt;</span>

<span class="tag">&lt;/transformations&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p title="Standard transformers configured in the config file can perform the following transformations of entity JSON:">在配置文件中配置的标准转换器可以执行实体JSON的以下转换：</p>
</div>
<div class="ulist">
<ul>
<li>
<p title="rename entity">重命名实体</p>
</li>
<li>
<p title="rename entity attribute">重命名实体属性</p>
</li>
<li>
<p title="remove entity attribute">删除实体属性</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>JSON transformation works for the following REST API endpoints:</p>
</div>
<div class="ulist">
<ul>
<li>
<p title="/entities - getting entities list, getting a single entity, entity create, entity update, entity delete"><strong>/ entities-</strong>获取实体列表，获取单个实体，创建实体，更新实体，删除实体</p>
</li>
<li>
<p title="/queries - entities JSON returned by the query will be transformed"><strong>/ queries-查询</strong>返回的实体JSON将被转换</p>
</li>
<li>
<p title="/services - JSON transformations will be applied both to entities returned by the service method and to entities passed as a service method argument"><strong>/ services</strong> -JSON转换将同时应用于服务方法返回的实体和作为服务方法参数传递的实体</p>
</li>
</ul>
</div>
<div class="paragraph">
<p title="JSON transformations are applied if the request to the REST API contains the modelVersion URL parameter with the data model version number.">如果对REST API的请求包含带有数据模型版本号的<code>modelVersion</code> URL参数，则将应用JSON转换.</p>
</div>
<div class="paragraph">
<p title="See the 数据模型版本化示例 to understand how to configure data model versioning and use it from the client application.">请参阅" <a href="#rest_api_v2_ex_json_transformations">数据模型版本控制示例"</a>以了解如何配置数据模型版本控制并从客户端应用程序使用它.</p>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_cors"><a class="anchor" href="#rest_api_v2_cors"></a><a class="link" href="#rest_api_v2_cors">3.4. CORS Settings</a></h3>
<div class="paragraph">
<p title="By default, all CORS requests to the REST API are allowed. To restrict the origins list you can define the cuba.rest.allowedOrigins application property."> 默认情况下，允许所有对REST API的CORS请求.  要限制来源列表，您可以定义<a href="#cuba.rest.allowedOrigins">cuba.rest.allowedOrigins</a>应用程序属性.</p>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_anonymous"><a class="anchor" href="#rest_api_v2_anonymous"></a><a class="link" href="#rest_api_v2_anonymous">3.5. Anonymous Access</a></h3>
<div class="paragraph">
<p title="By default, anonymous access is disabled. To enable it, use the cuba.rest.anonymousEnabled application property. A request is considered to be anonymous if it doesn’t contain an Authentication header. In this case, the SecurityContext will contain an anonymous user session."> 默认情况下，禁用匿名访问.  要启用它，请使用<a href="#cuba.rest.anonymousEnabled">cuba.rest.anonymousEnabled</a>应用程序属性.  如果请求不包含<code>Authentication</code>标头，则该请求被视为匿名.  在这种情况下， <a href="#securityContext">SecurityContext</a>将包含一个匿名用户会话.</p>
</div>
<div class="paragraph">
<p title="To set up permissions for anonymous user you must define roles for the user specified by the cuba.anonymousLogin application property.">要为匿名用户设置权限，必须为<a href="#cuba.anonymousLogin">cuba.anonymousLogin</a>应用程序属性指定的用户定义<a href="#roles">角色</a> .</p>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_settings"><a class="anchor" href="#rest_api_v2_settings"></a><a class="link" href="#rest_api_v2_settings">3.6. Other REST API Settings</a></h3>
<div class="paragraph">
<p title="cuba.rest.client.id - defines a default REST API client id."><a href="#cuba.rest.client.id">cuba.rest.client.id-</a>定义默认的REST API客户端ID.</p>
</div>
<div class="paragraph">
<p title="cuba.rest.client.secret - defines a default REST API client secret."><a href="#cuba.rest.client.secret">cuba.rest.client.secret-</a>定义默认的REST API客户端密码.</p>
</div>
<div class="paragraph">
<p title="cuba.rest.client.tokenExpirationTimeSec - defines an access token expiration time for the default client in seconds."><a href="#cuba.rest.client.tokenExpirationTimeSec">cuba.rest.client.tokenExpirationTimeSec-</a>定义默认客户端的访问令牌到期时间（以秒为单位）.</p>
</div>
<div class="paragraph">
<p title="cuba.rest.client.refreshTokenExpirationTimeSec - defines a refresh token expiration time for the default client in seconds."><a href="#cuba.rest.client.refreshTokenExpirationTimeSec">cuba.rest.client.refreshTokenExpirationTimeSec-</a>定义默认客户端的刷新令牌到期时间（以秒为单位）.</p>
</div>
<div class="paragraph">
<p title="cuba.rest.client.authorizedGrantTypes - a list of authorized grant types for the default client. To disable refresh tokens remove the refresh_token item from the property value."> <a href="#cuba.rest.client.authorizedGrantTypes">cuba.rest.client.authorizedGrantTypes-</a>默认客户端的授权授权类型的列表.  要禁用刷新令牌，请从属性值中删除<code>refresh_token</code>项目.</p>
</div>
<div class="paragraph">
<p title="cuba.rest.maxUploadSize - defines a maximum file size that can be uploaded with the REST API."><a href="#cuba.rest.maxUploadSize">cuba.rest.maxUploadSize-</a>定义可以通过REST API上传的最大文件大小.</p>
</div>
<div class="paragraph">
<p title="cuba.rest.reuseRefreshToken - specifies whether a refresh token should be reused."><a href="#cuba.rest.reuseRefreshToken">cuba.rest.reuseRefreshToken-</a>指定是否应重新使用刷新令牌.</p>
</div>
<div class="paragraph">
<p title="cuba.rest.requiresSecurityToken - indicates that additional system attribute must be sent in JSON. See details in 集合属性的安全性约束 ."> <a href="#cuba.rest.requiresSecurityToken">cuba.rest.requiresSecurityToken-</a>指示必须以JSON发送其他系统属性.  请参阅<a href="#rest_api_v2_security_constraints">"集合属性的安全性约束"中的</a>详细信息.</p>
</div>
<div class="paragraph">
<p title="cuba.rest.tokenMaskingEnabled - specifies whether REST API token values should be masked in application logs."><a href="#cuba.rest.tokenMaskingEnabled">cuba.rest.tokenMaskingEnabled-</a>指定是否应在应用程序日志中屏蔽REST API令牌值.</p>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_custom_controllers"><a class="anchor" href="#rest_api_v2_custom_controllers"></a><a class="link" href="#rest_api_v2_custom_controllers">3.7. Creating Custom OAuth2 Protected Controllers</a></h3>
<div class="paragraph">
<p title="If you need to create a custom REST controller protected with the OAuth2 authentication then you have to do the following:">如果您需要创建受OAuth2身份验证保护的自定义REST控制器，则必须执行以下操作：</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p title="Suppose you have the following REST controller:">假设您具有以下REST控制器：</p>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="keyword">package</span> <span class="namespace">com.company.test.portal.myapi</span>;

<span class="keyword">import</span> <span class="include">org.springframework.web.bind.annotation.GetMapping</span>;
<span class="keyword">import</span> <span class="include">org.springframework.web.bind.annotation.RequestMapping</span>;
<span class="keyword">import</span> <span class="include">org.springframework.web.bind.annotation.RestController</span>;
<span class="keyword">import</span> <span class="include">com.company.test.services.SomeService</span>;

<span class="annotation">@RestController</span>
<span class="annotation">@RequestMapping</span>(<span class="string"><span class="delimiter">"</span><span class="content">/myapi</span><span class="delimiter">"</span></span>)
<span class="directive">public</span> <span class="type">class</span> <span class="class">MyController</span> {

    <span class="annotation">@Inject</span>
    <span class="directive">protected</span> SomeService someService;

    <span class="annotation">@GetMapping</span>(<span class="string"><span class="delimiter">"</span><span class="content">/dosmth</span><span class="delimiter">"</span></span>)
    <span class="directive">public</span> <span class="predefined-type">String</span> doSmth() {
        <span class="keyword">return</span> someService.getResult();
    }
}</code></pre>
</div>
</div>
</li>
<li>
<p title="Create a new Spring configuration file with name rest-dispatcher-spring.xml under the root package (com.company.test ) of web or portal module. The content of the file must be as follows:"> 在<strong>Web</strong>或<strong>门户网站</strong>模块的根包（ <code>com.company.test</code> ）下创建一个名为<code>rest-dispatcher-spring.xml</code>的新Spring配置文件.  文件内容必须如下：</p>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="preprocessor">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="tag">&lt;beans</span> <span class="attribute-name">xmlns</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://www.springframework.org/schema/beans</span><span class="delimiter">"</span></span>
       <span class="attribute-name">xmlns:xsi</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://www.w3.org/2001/XMLSchema-instance</span><span class="delimiter">"</span></span>
       <span class="attribute-name">xmlns:context</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://www.springframework.org/schema/context</span><span class="delimiter">"</span></span>
       <span class="attribute-name">xmlns:security</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://www.springframework.org/schema/security</span><span class="delimiter">"</span></span>
       <span class="attribute-name">xsi:schemaLocation</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span>
           <span class="content">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span>
               <span class="content">http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>

    <span class="comment">&lt;!-- Define a base package for your controllers--&gt;</span>
    <span class="tag">&lt;context:component-scan</span> <span class="attribute-name">base-package</span>=<span class="string"><span class="delimiter">"</span><span class="content">com.company.test.portal.myapi</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>

    <span class="tag">&lt;security:http</span> <span class="attribute-name">pattern</span>=<span class="string"><span class="delimiter">"</span><span class="content">/rest/myapi/**</span><span class="delimiter">"</span></span>
                   <span class="attribute-name">create-session</span>=<span class="string"><span class="delimiter">"</span><span class="content">stateless</span><span class="delimiter">"</span></span>
                   <span class="attribute-name">entry-point-ref</span>=<span class="string"><span class="delimiter">"</span><span class="content">oauthAuthenticationEntryPoint</span><span class="delimiter">"</span></span>
                   <span class="attribute-name">xmlns</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://www.springframework.org/schema/security</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
        <span class="comment">&lt;!-- Specify one or more protected URL patterns--&gt;</span>
        <span class="tag">&lt;intercept-url</span> <span class="attribute-name">pattern</span>=<span class="string"><span class="delimiter">"</span><span class="content">/rest/myapi/**</span><span class="delimiter">"</span></span> <span class="attribute-name">access</span>=<span class="string"><span class="delimiter">"</span><span class="content">isAuthenticated()</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;anonymous</span> <span class="attribute-name">enabled</span>=<span class="string"><span class="delimiter">"</span><span class="content">false</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;csrf</span> <span class="attribute-name">disabled</span>=<span class="string"><span class="delimiter">"</span><span class="content">true</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;cors</span> <span class="attribute-name">configuration-source-ref</span>=<span class="string"><span class="delimiter">"</span><span class="content">cuba_RestCorsSource</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;custom-filter</span> <span class="attribute-name">ref</span>=<span class="string"><span class="delimiter">"</span><span class="content">resourceFilter</span><span class="delimiter">"</span></span> <span class="attribute-name">before</span>=<span class="string"><span class="delimiter">"</span><span class="content">PRE_AUTH_FILTER</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;custom-filter</span> <span class="attribute-name">ref</span>=<span class="string"><span class="delimiter">"</span><span class="content">cuba_AnonymousAuthenticationFilter</span><span class="delimiter">"</span></span> <span class="attribute-name">after</span>=<span class="string"><span class="delimiter">"</span><span class="content">PRE_AUTH_FILTER</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
    <span class="tag">&lt;/security:http&gt;</span>
<span class="tag">&lt;/beans&gt;</span></code></pre>
</div>
</div>
</li>
<li>
<p title="Define an additive application property cuba.restSpringContextConfig in the properties file of the module,.e.g. portal-app.properties :">在模块的属性文件（例如<code>cuba.restSpringContextConfig</code>中定义<a href="#additive_app_properties">附加</a>应用程序属性<code>portal-app.properties</code> ：</p>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="properties">cuba.restSpringContextConfig = +com/company/test/rest-dispatcher-spring.xml</code></pre>
</div>
</div>
</li>
<li>
<p title="The new controller runs in the context of the CubaRestApiServlet . So the URL for controller methods will start with the /rest , i.e. the doSmth() method will be accesed by the URL: http://localhost:8080/app-portal/rest/myapi/dosmth ."> 新的控制器在<code>CubaRestApiServlet</code>的上下文中运行.  因此，控制器方法的URL将以<code>/rest</code>开头，即doSmth（）方法将通过URL访问： <code>http://localhost:8080/app-portal/rest/myapi/dosmth</code> .</p>
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Warning</div>
</td>
<td class="content">
<div class="paragraph">
<p title="URL of the custom controller MUST NOT start with the /rest/v2 .">自定义控制器的URL不得以<code>/rest/v2</code>开头.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_security_constraints"><a class="anchor" href="#rest_api_v2_security_constraints"></a><a class="link" href="#rest_api_v2_security_constraints">3.8. Security Constraints for Collection Attributes</a></h3>
<div class="paragraph">
<p title="Let’s consider the following situation:">让我们考虑以下情况：</p>
</div>
<div class="ulist">
<ul>
<li>
<p title="Your data model contains Order and OrderLine entities which form the one-to-many composition.">您的数据模型包含<code>Order</code>和<code>OrderLine</code>实体，它们构成一对多的组合.</p>
</li>
<li>
<p title="Your REST client loads an instance of Order together with the nested collection of OrderLine instances.">您的REST客户端会加载<code>Order</code>实例以及<code>OrderLine</code>实例的嵌套集合.</p>
</li>
<li>
<p title="There are 安全约束 that filter out some OrderLine instances, so the client does not load them and doesn’t know they exist. Say line5 is not loaded by the client but exists in the database."> 有一些<a href="#constraints">安全约束</a>可以过滤掉某些<code>OrderLine</code>实例，因此客户端不会加载它们，也不知道它们存在.  假设第5 <code>line5</code>未由客户端加载，但存在于数据库中.</p>
</li>
<li>
<p title="If your client removes, say, line2 from the collection and then saves the whole composition using the /entities/{entityName}/{entityId} endpoint, there are two outcomes:">如果您的客户端删除，也就是说， <code>line2</code>从集合，然后保存使用全成分<code>/entities/{entityName}/{entityId}</code>终点，有两种结果：</p>
<div class="openblock">
<div class="content">
<div class="olist arabic">
<ol class="arabic">
<li>
<p title="If the constraints were not changed since the entities were loaded, the framework restores the filtered line5 instance in the collection and deletes only line2 , which is the correct behavior.">如果自加载实体以来未更改约束，则框架将还原集合中已过滤的<code>line5</code>实例，并仅删除<code>line2</code> ，这是正确的行为.</p>
</li>
<li>
<p title="If the constraints were changed in a way that line5 is now available to the client, the framework cannot restore the information about filtered collection elements correctly. As a result, both line2 and line5 will be deleted."> 如果约束条件的方式，改变<code>line5</code>现在提供给客户，框架不能恢复，了解如何正确过滤收集要素的信息.  结果，第<code>line2</code>和第5 <code>line5</code>将被删除.</p>
</li>
</ol>
</div>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p title="If you are concerned with the case described above, you can eliminate possible data loss by sending a special system attribute in the JSON representing your entities. This attribute is called __securityToken and automatically included in resulting JSON if the cuba.rest.requiresSecurityToken application property is set to true . The responsibility of your REST client is to return this attribute back when saving entities."> 如果您担心上述情况，可以通过在表示您的实体的JSON中发送特殊的系统属性来消除可能的数据丢失.  此属性称为<code>__securityToken</code> ，如果<a href="#cuba.rest.requiresSecurityToken">cuba.rest.requiresSecurityToken</a>应用程序属性设置为<code>true</code> ， <a href="#cuba.rest.requiresSecurityToken">则会</a>自动将其包含在结果JSON中.  REST客户端的职责是在保存实体时返回此属性.</p>
</div>
<div class="paragraph">
<p title="An example of entity JSON including security token:">包含安全令牌的实体JSON示例：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">fa430b56-ceb2-150f-6a85-12c691908bd1</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">number</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">OR-000001</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">items</span><span class="delimiter">"</span></span>: [
    {
      <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">82e6e6d2-be97-c81c-c58d-5e2760ae095a</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">description</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Item 1</span><span class="delimiter">"</span></span>
    },
    {
      <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">988a8cb5-d61a-e493-c401-f717dd9a2d66</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">description</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Item 2</span><span class="delimiter">"</span></span>
    }
  ],
  <span class="key"><span class="delimiter">"</span><span class="content">__securityToken</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">0NXc6bQh+vZuXE4Fsk4mJX4QnhS3lOBfxzUniltchpxPfi1rZ5htEmekfV60sbEuWUykbDoY+rCxdhzORaYQNQ==</span><span class="delimiter">"</span></span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p title="The __securityToken attribute contains encoded identifiers of filtered instances, so the framework can always restore the required information regardless of changes in constraints."><code>__securityToken</code>属性包含已过滤实例的编码标识符，因此，无论约束如何更改，框架都可以始终还原所需的信息.</p>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_persistent_token_store"><a class="anchor" href="#rest_api_v2_persistent_token_store"></a><a class="link" href="#rest_api_v2_persistent_token_store">3.9. Persistent Token Store</a></h3>
<div class="paragraph">
<p title="By default, OAuth tokens are stored in memory only. If you want to persist them in the database as well, you should set the cuba.rest.storeTokensInDb application property to true . The property value is stored in the database, so you can change its value in the Administration > Application Properties screen."> 默认情况下，OAuth令牌仅存储在内存中.  如果还要将它们保留在数据库中，则应将<a href="#cuba.rest.storeTokensInDb">cuba.rest.storeTokensInDb</a>应用程序属性设置为<code>true</code> .  该属性值存储在数据库中，因此您可以在" <strong>管理"&gt;"应用程序属性"</strong>屏幕中更改其值.</p>
</div>
<div class="paragraph">
<p title="Expired tokens in the database store must be periodically deleted. The cron expression for scheduled removing of expired tokens is specified in the cuba.rest.deleteExpiredTokensCron application property."> 数据库存储中过期的令牌必须定期删除.  在<a href="#cuba.rest.deleteExpiredTokensCron">cuba.rest.deleteExpiredTokensCron</a>应用程序属性中指定了用于计划删除过期令牌的cron表达式.</p>
</div>
</div>
<div class="sect2">
<h3 id="rest_swagger"><a class="anchor" href="#rest_swagger"></a><a class="link" href="#rest_swagger">3.10. Project-specific Swagger Documentation</a></h3>
<div class="paragraph">
<p title="The generic documentation on the REST API is available at http://files.cuba-platform.com/swagger/7.1 .">有关REST API的通用文档可从<a href="../../files.cuba-platform.com/swagger/7.1" class="bare">http://files.cuba-platform.com/swagger/7.1获得</a> .</p>
</div>
<div class="paragraph">
<p title="Any running CUBA application also exports the project-specific documentation generated according to the Swagger规范版本2.0 .">任何正在运行的CUBA应用程序也会导出根据<a href="../../https@s0swagger0io.icopy.site/docs/specification/2-0/basic-structure/default.htm" replaced="yes">Swagger规范版本2.0</a>生成的项目特定文档.</p>
</div>
<div class="paragraph">
<p title="The documentation is available at the following URLs:">该文档可从以下URL获得：</p>
</div>
<div class="ulist">
<ul>
<li>
<p title="/rest/v2/docs/swagger.yaml - YAML version of generic documentation."><code>/rest/v2/docs/swagger.yaml</code>通用文档的YAML版本.</p>
</li>
<li>
<p title="/rest/v2/docs/swagger.json - JSON version of generic documentation."><code>/rest/v2/docs/swagger.json</code>通用文档的JSON版本.</p>
</li>
<li>
<p title="/rest/v2/docs/swaggerDetailed.yaml - YAML version of project-specific Swagger documentation."><code>/rest/v2/docs/swaggerDetailed.yaml</code>特定于项目的Swagger文档的YAML版本.</p>
</li>
<li>
<p title="/rest/v2/docs/swaggerDetailed.json - JSON version of project-specific Swagger documentation."><code>/rest/v2/docs/swaggerDetailed.json</code>特定于项目的Swagger文档的JSON版本.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p title="For example:">例如：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="plain">http://localhost:8080/app/rest/v2/docs/swagger.yaml
http://localhost:8080/app/rest/v2/docs/swaggerDetailed.yaml</code></pre>
</div>
</div>
<div class="paragraph">
<p title="The documentation can be used to visualize, test or generate a client code for the REST API. See the following tools: 招摇UI , Swagger Inspector , Postman , Swagger Codegen ."> 该文档可用于可视化，测试或生成REST API的客户端代码.  请参阅以下工具： <a href="../../https@s0swagger0io.icopy.site/swagger-ui/default.htm" replaced="yes">Swagger UI</a> ， <a href="../../https@s0swagger0io.icopy.site/swagger-inspector/default.htm" replaced="yes">Swagger检查器</a> ， <a href="../../https@www.getpostman.com/default.htm">Postman</a> ， <a href="../../https@s0swagger0io.icopy.site/swagger-codegen/default.htm" replaced="yes">Swagger Codegen</a> .</p>
</div>
<div class="paragraph">
<p title="The generated documentation includes:">生成的文档包括：</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p title="CRUD operations, such as:">CRUD操作，例如：</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p title="entity CRUD operations:">实体CRUD操作：</p>
<div class="imageblock text-center">
<div class="content">
<img src="../../https@doc.cuba-platform.com/restapi-7.1/img/swagger_crud.png" alt="swagger crud">
</div>
</div>
</li>
<li>
<p><a href="#rest_api_v2_ex_get_entities_list"></a>,</p>
</li>
<li>
<p title="filtering entities.">过滤实体.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p title="All CRUD parameters and responses have a model available, for example:">所有CRUD参数和响应都有可用的模型，例如：</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../https@doc.cuba-platform.com/restapi-7.1/img/swagger_crud_model.png" alt="swagger crud model">
</div>
</div>
</div>
</div>
</li>
<li>
<p>Predefined <a href="#rest_api_v2_queries_config" title="REST queries">REST查询</a>:</p>
<div class="imageblock text-center">
<div class="content">
<img src="../../https@doc.cuba-platform.com/restapi-7.1/img/swagger_query.png" alt="swagger query">
</div>
</div>
</li>
<li>
<p>Exposed <a href="#rest_api_v2_services_config">services</a>:</p>
<div class="imageblock text-center">
<div class="content">
<img src="../../https@doc.cuba-platform.com/restapi-7.1/img/swagger_service.png" alt="swagger service">
</div>
</div>
</li>
</ol>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="usage_example"><a class="anchor" href="#usage_example"></a><a class="link" href="#usage_example">4. Using REST API</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p title="This section contains REST API usage examples.">本节包含REST API的使用示例.</p>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
<div class="paragraph">
<p title="See the detailed documentation on the API endpoints at http://files.cuba-platform.com/swagger/7.1 .">请参阅<a href="../../files.cuba-platform.com/swagger/7.1" class="bare">http://files.cuba-platform.com/swagger/7.1</a>上有关API端点的详细文档.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="sect2">
<h3 id="rest_api_v2_ex_get_token"><a class="anchor" href="#rest_api_v2_ex_get_token"></a><a class="link" href="#rest_api_v2_ex_get_token">4.1. Getting an OAuth Token</a></h3>
<div class="paragraph">
<p title="An OAuth token is required for any REST API method (except when you are using an anonymous access ). A token can be obtained by the POST request on the address:"> 任何REST API方法都需要OAuth令牌（使用<a href="#rest_api_v2_anonymous">匿名访问</a>时除外）.  可以通过以下地址上的POST请求获得令牌：</p>
</div>
<div class="paragraph">
<p><code>http://localhost:8080/app/rest/v2/oauth/token</code></p>
</div>
<div class="paragraph">
<p title="An access to this endpoint is protected with a basic authentication. REST API client identifier and password is used for basic authentication. Please note that these are not an application user login and password. REST API client id and password are defined in the application properties cuba.rest.client.id and cuba.rest.client.secret (the default values are client and secret ). You must pass the client id and secret, separated by a single colon (&quot;:&quot;) character, within a base64 encoded string in the Authorization header."> 通过基本身份验证可以保护对此端点的访问.  REST API客户端标识符和密码用于基本身份验证.  请注意，这些不是应用程序用户的登录名和密码.  REST API客户端ID和密码在应用程序属性<a href="#cuba.rest.client.id">cuba.rest.client.id</a>和<a href="#cuba.rest.client.secret">cuba.rest.client.secret</a>中定义（默认值为<code>client</code>和<code>secret</code> ）.  您必须在<code>Authorization</code>标头中以base64编码的字符串中传递客户端ID和密钥，并用一个冒号（"："）字符分隔.</p>
</div>
<div class="paragraph">
<p title="The request type must be application/x-www-form-urlencoded , the encoding is UTF-8 .">请求类型必须为<code>application/x-www-form-urlencoded</code> ，编码为<code>UTF-8</code> .</p>
</div>
<div class="paragraph">
<p title="The request must contain the following parameters:">该请求必须包含以下参数：</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>grant_type</code> - <code>password</code>.</p>
</li>
<li>
<p title="username - application user login."><code>username</code> -应用程序用户登录名.</p>
</li>
<li>
<p title="password - application user password."><code>password</code> -应用程序用户密码.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="httprequest">POST /oauth/token
Authorization: Basic Y2xpZW50OnNlY3JldA==
Content-Type: application/x-www-form-urlencoded

grant_type=password&amp;username=smith&amp;password=qwerty123</code></pre>
</div>
</div>
<div class="paragraph">
<p title="You can also use cURL :">您也可以使用<a href="../../https@curl.haxx.se/default.htm">cURL</a> ：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="plain">curl -H "Content-type: application/x-www-form-urlencoded" -H "Authorization: Basic Y2xpZW50OnNlY3JldA==" -d "grant_type=password&amp;username=admin&amp;password=admin" http://localhost:8080/app/rest/v2/oauth/token</code></pre>
</div>
</div>
<div class="paragraph">
<p title="Method returns a JSON object:">方法返回一个JSON对象：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">"</span><span class="content">access_token</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">29bc6b45-83cd-4050-8c7a-2a8a60adf251</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">token_type</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">bearer</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">refresh_token</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">e765446f-d49e-4634-a6d3-2d0583a0e7ea</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">expires_in</span><span class="delimiter">"</span></span>: <span class="integer">43198</span>,
  <span class="key"><span class="delimiter">"</span><span class="content">scope</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">rest-api</span><span class="delimiter">"</span></span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p title="An access token value is in the access_token property.">访问令牌值位于<code>access_token</code>属性中.</p>
</div>
<div class="paragraph">
<p title="In order to use the access token, put it in the Authorization header with the Bearer type, for example:">为了使用访问令牌，请将其放入<code>Bearer</code>类型的<code>Authorization</code>标头中，例如：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="plain">Authorization: Bearer 29bc6b45-83cd-4050-8c7a-2a8a60adf251</code></pre>
</div>
</div>
<div class="paragraph">
<p title="The refresh_token property contains a refresh token value. A refresh token cannot be used for accessing the protected resources, but it has a longer lifetime than an access token and it can be used to obtain new access token when the current one is expired."> <code>refresh_token</code>属性包含刷新令牌值.  刷新令牌不能用于访问受保护的资源，但是它的寿命比访问令牌的寿命长，并且当当前令牌过期时，可以用来获取新的访问令牌.</p>
</div>
<div class="paragraph">
<p>The request for getting new access token using the refresh token must contain the following parameters:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>grant_type</code> - <code>refresh_token</code>.</p>
</li>
<li>
<p title="refresh_token - a refresh token value."><code>refresh_token</code>刷新令牌值.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="httprequest">POST /oauth/token
Authorization: Basic Y2xpZW50OnNlY3JldA==
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&amp;refresh_token=e765446f-d49e-4634-a6d3-2d0583a0e7ea</code></pre>
</div>
</div>
<div class="paragraph">
<p title="See also the following application properties related to tokens:">另请参阅以下与令牌相关的应用程序属性：</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="#cuba.rest.client.tokenExpirationTimeSec">cuba.rest.client.tokenExpirationTimeSec</a></p>
</li>
<li>
<p><a href="#cuba.rest.client.refreshTokenExpirationTimeSec">cuba.rest.client.refreshTokenExpirationTimeSec</a></p>
</li>
<li>
<p><a href="#cuba.rest.client.authorizedGrantTypes">cuba.rest.client.authorizedGrantTypes</a></p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_ldap"><a class="anchor" href="#rest_api_v2_ldap"></a><a class="link" href="#rest_api_v2_ldap">4.2. REST API Authentication with LDAP</a></h3>
<div class="paragraph">
<p title="LDAP Authentication for REST can be enabled using the following properties:">可以使用以下属性启用REST的LDAP身份验证：</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>cuba.rest.ldap.enabled</code> - whether LDAP authentication is enabled or not.</p>
</li>
<li>
<p title="cuba.rest.ldap.urls – LDAP server URL."><code>cuba.rest.ldap.urls</code> – LDAP服务器URL.</p>
</li>
<li>
<p title="cuba.rest.ldap.base – base DN for user search."><code>cuba.rest.ldap.base</code> –用户搜索的基本DN.</p>
</li>
<li>
<p title="cuba.rest.ldap.user – the distinguished name of a system user which has the right to read the information from the directory."><code>cuba.rest.ldap.user</code> –有权从目录中读取信息的系统用户的专有名称.</p>
</li>
<li>
<p title="cuba.rest.ldap.password – the password for the system user defined in the cuba.web.ldap.user property."><code>cuba.rest.ldap.password</code> –在<a href="#cuba.web.ldap.user">cuba.web.ldap.user</a>属性中定义的系统用户的密码.</p>
</li>
<li>
<p title="cuba.rest.ldap.userLoginField - the name of an LDAP user attribute that is used for matching the login name. sAMAccountName by default (suitable for Active Directory)."> <code>cuba.rest.ldap.userLoginField</code>用于匹配登录名的LDAP用户属性的名称.  默认情况下为<code>sAMAccountName</code> （适用于Active Directory）.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p title="Example of local.app.properties file:"><a href="#app_properties_files">local.app.properties</a>文件的示例：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="properties">cuba.rest.ldap.enabled = true
cuba.rest.ldap.urls = ldap://192.168.1.1:389
cuba.rest.ldap.base = ou=Employees,dc=mycompany,dc=com
cuba.rest.ldap.user = cn=System User,ou=Employees,dc=mycompany,dc=com
cuba.rest.ldap.password = system_user_password</code></pre>
</div>
</div>
<div class="paragraph">
<p title="You can obtain OAuth token using the following end-point:">您可以使用以下端点获取OAuth令牌：</p>
</div>
<div class="paragraph">
<p><code>http://localhost:8080/app/rest/v2/ldap/token</code></p>
</div>
<div class="paragraph">
<p title="An access to this endpoint is protected with the basic authentication. REST API client identifier and password are used for basic authentication. Please note that these are not the application user login and password. REST API client id and password are defined in the application properties cuba.rest.client.id and cuba.rest.client.secret (the default values are client and secret ). You must pass the client id and secret, separated by a single colon (&quot;:&quot;) character, within a base64 encoded string in the Authorization header."> 通过基本身份验证可以保护对此端点的访问.  REST API客户端标识符和密码用于基本身份验证.  请注意，这些不是应用程序用户的登录名和密码.  REST API客户端ID和密码在应用程序属性<a href="#cuba.rest.client.id">cuba.rest.client.id</a>和<a href="#cuba.rest.client.secret">cuba.rest.client.secret</a>中定义（默认值为<code>client</code>和<code>secret</code> ）.  您必须在<code>Authorization</code>标头中以base64编码的字符串中传递客户端ID和密钥，并用一个冒号（"："）字符分隔.</p>
</div>
<div class="paragraph">
<p title="Request parameters are the same as for standard authentication:">请求参数与标准身份验证相同：</p>
</div>
<div class="ulist">
<ul>
<li>
<p title="grant_type - always password ."><code>grant_type</code>始终为<code>password</code> .</p>
</li>
<li>
<p title="username - application user login."><code>username</code> -应用程序用户登录名.</p>
</li>
<li>
<p title="password - application user password."><code>password</code> -应用程序用户密码.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p title="The request type must be application/x-www-form-urlencoded , the encoding is UTF-8 .">请求类型必须为<code>application/x-www-form-urlencoded</code> ，编码为<code>UTF-8</code> .</p>
</div>
<div class="paragraph">
<p title="Also, standard authentication with login and password can be disabled:">此外，可以禁用使用登录名和密码的标准身份验证：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="properties">cuba.rest.standardAuthenticationEnabled = false</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_custom_auth"><a class="anchor" href="#rest_api_v2_custom_auth"></a><a class="link" href="#rest_api_v2_custom_auth">4.3. Custom Authentication</a></h3>
<div class="paragraph">
<p title="Authentication mechanisms can provide access tokens by key, link, LDAP login and password, etc. REST API uses its own authentication mechanism that cannot be modified. In order to use custom authentication process, you need to create a REST controller and use its URL."> 身份验证机制可以通过密钥，链接，LDAP登录名和密码等提供访问令牌.RESTAPI使用其自己的身份验证机制，该身份验证机制无法修改.  为了使用自定义身份验证过程，您需要创建一个REST控制器并使用其URL.</p>
</div>
<div class="paragraph">
<p title="Let’s consider the custom authentication mechanism that enables getting an OAuth token by a promo code. In the following example we will use a sample application that contains the Coupon entity with code attribute. We will send this attribute’s value as an authentication parameter in GET request."> 让我们考虑一下定制身份验证机制，该机制可以通过促销代码获取OAuth令牌.  在以下示例中，我们将使用一个示例应用程序，其中包含带有<code>code</code>属性的<code>Coupon</code>实体.  我们将在GET请求中将此属性的值作为身份验证参数发送.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p title="Create a Coupon entity with the code attribute:">使用<code>code</code>属性创建一个<code>Coupon</code>实体：</p>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@Column</span>(name = <span class="string"><span class="delimiter">"</span><span class="content">CODE</span><span class="delimiter">"</span></span>, unique = <span class="predefined-constant">true</span>, length = <span class="integer">4</span>)
<span class="directive">protected</span> <span class="predefined-type">String</span> code;</code></pre>
</div>
</div>
</li>
<li>
<p title="Create a user with promo-user login on behalf of which the authentication will be performed.">创建一个<a href="#users">用户</a> ，其认证将执行与<strong>促销用户</strong>登录代表.</p>
</li>
<li>
<p title="Create a new Spring configuration file with name rest-dispatcher-spring.xml under the root package (com.company.demo ) of web module. The content of the file must be as follows:"> 在<strong>Web</strong>模块的根包（ <code>com.company.demo</code> ）下创建一个名为<code>rest-dispatcher-spring.xml</code>的新Spring配置文件.  文件内容必须如下：</p>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;beans</span> <span class="attribute-name">xmlns</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://www.springframework.org/schema/beans</span><span class="delimiter">"</span></span>
       <span class="attribute-name">xmlns:xsi</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://www.w3.org/2001/XMLSchema-instance</span><span class="delimiter">"</span></span>
       <span class="attribute-name">xmlns:context</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://www.springframework.org/schema/context</span><span class="delimiter">"</span></span>
       <span class="attribute-name">xsi:schemaLocation</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://www.springframework.org/schema/beans</span>
                           <span class="content">http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span>
                           <span class="content">http://www.springframework.org/schema/context</span>
                           <span class="content">http://www.springframework.org/schema/context/spring-context-4.3.xsd</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>

    <span class="tag">&lt;context:component-scan</span> <span class="attribute-name">base-package</span>=<span class="string"><span class="delimiter">"</span><span class="content">com.company.demo.web.rest</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>

<span class="tag">&lt;/beans&gt;</span></code></pre>
</div>
</div>
</li>
<li>
<p title="Include the file into the cuba.restSpringContextConfig application property in the modules/web/src/web-app.properties file:">将文件包含在<code>modules/web/src/web-app.properties</code>文件的<code>cuba.restSpringContextConfig</code>应用程序属性中：</p>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="properties">cuba.restSpringContextConfig = +com/company/demo/rest-dispatcher-spring.xml</code></pre>
</div>
</div>
</li>
<li>
<p title="Create the rest package under the root package of web module and implement the custom Spring MVC controller in it. Use the OAuthTokenIssuer bean to generate and issue the REST API token for a user after the custom authentication:"> 在<strong>Web</strong>模块的根包下创建<code>rest</code>包，并在其中实现自定义Spring MVC控制器.  在自定义身份验证之后，使用<code>OAuthTokenIssuer</code> bean来为用户生成并发布REST API令牌：</p>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@RestController</span>
<span class="annotation">@RequestMapping</span>(<span class="string"><span class="delimiter">"</span><span class="content">auth-code</span><span class="delimiter">"</span></span>)
<span class="directive">public</span> <span class="type">class</span> <span class="class">AuthCodeController</span> {
    <span class="annotation">@Inject</span>
    <span class="directive">private</span> OAuthTokenIssuer oAuthTokenIssuer;
    <span class="annotation">@Inject</span>
    <span class="directive">private</span> LoginService loginService;
    <span class="annotation">@Inject</span>
    <span class="directive">private</span> <span class="predefined-type">Configuration</span> configuration;
    <span class="annotation">@Inject</span>
    <span class="directive">private</span> DataManager dataManager;
    <span class="annotation">@Inject</span>
    <span class="directive">private</span> MessageTools messageTools;

    <span class="comment">// here we check secret code and issue token using OAuthTokenIssuer</span>
    <span class="annotation">@RequestMapping</span>(method = RequestMethod.GET)
    <span class="directive">public</span> ResponseEntity get(<span class="annotation">@RequestParam</span>(<span class="string"><span class="delimiter">"</span><span class="content">code</span><span class="delimiter">"</span></span>) <span class="predefined-type">String</span> authCode) {
        <span class="comment">// obtain system session to be able to call middleware services</span>
        WebAuthConfig webAuthConfig = configuration.getConfig(WebAuthConfig.class);
        UserSession systemSession;
        <span class="keyword">try</span> {
            systemSession = loginService.getSystemSession(webAuthConfig.getTrustedClientPassword());
        } <span class="keyword">catch</span> (<span class="exception">LoginException</span> e) {
            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">RuntimeException</span>(<span class="string"><span class="delimiter">"</span><span class="content">Error during system auth</span><span class="delimiter">"</span></span>);
        }

        <span class="comment">// set security context</span>
        AppContext.setSecurityContext(<span class="keyword">new</span> SecurityContext(systemSession));
        <span class="keyword">try</span> {
            <span class="comment">// find coupon with code</span>
            LoadContext&lt;Coupon&gt; loadContext = LoadContext.create(Coupon.class)
                    .setQuery(LoadContext.createQuery(<span class="string"><span class="delimiter">"</span><span class="content">select c from demo$Coupon c where c.code = :code</span><span class="delimiter">"</span></span>)
                            .setParameter(<span class="string"><span class="delimiter">"</span><span class="content">code</span><span class="delimiter">"</span></span>, authCode));

            <span class="keyword">if</span> (dataManager.load(loadContext) == <span class="predefined-constant">null</span>) {
                <span class="comment">// if coupon is not found - code is incorrect</span>
                <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="keyword">new</span> ErrorInfo(<span class="string"><span class="delimiter">"</span><span class="content">invalid_grant</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">Bad credentials</span><span class="delimiter">"</span></span>), HttpStatus.BAD_REQUEST);
            }

            <span class="comment">// generate token for "promo-user"</span>
            OAuthTokenIssuer.OAuth2AccessTokenResult tokenResult =
                    oAuthTokenIssuer.issueToken(<span class="string"><span class="delimiter">"</span><span class="content">promo-user</span><span class="delimiter">"</span></span>, messageTools.getDefaultLocale(), <span class="predefined-type">Collections</span>.emptyMap());
            OAuth2AccessToken accessToken = tokenResult.getAccessToken();

            <span class="comment">// set security HTTP headers to prevent browser caching of security token</span>
            HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();
            headers.set(HttpHeaders.CACHE_CONTROL, <span class="string"><span class="delimiter">"</span><span class="content">no-store</span><span class="delimiter">"</span></span>);
            headers.set(HttpHeaders.PRAGMA, <span class="string"><span class="delimiter">"</span><span class="content">no-cache</span><span class="delimiter">"</span></span>);
            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(accessToken, headers, HttpStatus.OK);
        } <span class="keyword">finally</span> {
            <span class="comment">// clean up security context</span>
            AppContext.setSecurityContext(<span class="predefined-constant">null</span>);
        }
    }

    <span class="comment">// POJO for JSON error messages</span>
    <span class="directive">public</span> <span class="directive">static</span> <span class="type">class</span> <span class="class">ErrorInfo</span> <span class="directive">implements</span> <span class="predefined-type">Serializable</span> {
        <span class="directive">private</span> <span class="predefined-type">String</span> error;
        <span class="directive">private</span> <span class="predefined-type">String</span> error_description;

        <span class="directive">public</span> ErrorInfo(<span class="predefined-type">String</span> error, <span class="predefined-type">String</span> error_description) {
            <span class="local-variable">this</span>.error = error;
            <span class="local-variable">this</span>.error_description = error_description;
        }

        <span class="directive">public</span> <span class="predefined-type">String</span> getError() {
            <span class="keyword">return</span> error;
        }

        <span class="directive">public</span> <span class="predefined-type">String</span> getError_description() {
            <span class="keyword">return</span> error_description;
        }
    }
}</code></pre>
</div>
</div>
</li>
<li>
<p title="Exclude the rest package from scanning in web/core modules: the OAuthTokenIssuer bean is available only in REST API context, and scanning for it in the application context will cause an error.">将<code>rest</code>软件包排除在<strong>Web /核心</strong>模块的扫描范围之外： <code>OAuthTokenIssuer</code> bean仅在REST API上下文中可用，而在应用程序上下文中对其进行扫描将导致错误.</p>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;context:component-scan</span> <span class="attribute-name">base-package</span>=<span class="string"><span class="delimiter">"</span><span class="content">com.company.demo</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;context:exclude-filter</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">"</span><span class="content">regex</span><span class="delimiter">"</span></span> <span class="attribute-name">expression</span>=<span class="string"><span class="delimiter">"</span><span class="content">com\.company\.demo\.web\.rest\..*</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
<span class="tag">&lt;/context:component-scan&gt;</span></code></pre>
</div>
</div>
</li>
<li>
<p title="Now users will be able to obtain OAuth2 access code using GET HTTP request with the code parameter to">现在，用户将可以使用带有<code>code</code>参数的GET HTTP请求获取OAuth2访问代码.</p>
<div class="paragraph">
<p><code>http://localhost:8080/app/rest/auth-code?code=A325</code></p>
</div>
<div class="paragraph">
<p title="The result will be:">结果将是：</p>
</div>
<div class="literalblock">
<div class="content">
<pre>{"access_token":"74202587-6c2b-4d74-bcf2-0d687ea85dca","token_type":"bearer","expires_in":43199,"scope":"rest-api"}</pre>
</div>
</div>
<div class="paragraph">
<p title="The obtained access token should then be passed to REST API, as described in the documentation.">然后，应按照文档中所述将获取的访问令牌传递给REST API.</p>
</div>
</li>
</ol>
</div>
<div class="sect3">
<h4 id="rest_api_v2_social_login"><a class="anchor" href="#rest_api_v2_social_login"></a><a class="link" href="#rest_api_v2_social_login">4.3.1. Social Login in REST API</a></h4>
<div class="paragraph">
<p title="The mechanism of social login can be used in REST API too. The complete sample application is available on GitHub and described in the [social_login] section, below are the key points of getting an access token with a Facebook account."> 社交登录机制也可以在REST API中使用.  完整的示例应用程序可在<a href="../../https@github.com/cuba-platform/sample-social-login/default.htm">GitHub上</a>获得，并在<a href="#social_login">[social_login]</a>部分中进行了描述，以下是使用Facebook帐户获取访问令牌的关键点.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p title="Create the restapi package under the root package of web module and implement the custom Spring MVC controller in it. This controller should contain two main methods: get() to get a ResponseEntity instance and login() to obtain an OAuth token."> 在<strong>Web</strong>模块的根包下创建<code>restapi</code>包，并在其中实现自定义Spring MVC控制器.  该控制器应包含两个主要方法： <code>get()</code>获取<code>ResponseEntity</code>实例和<code>login()</code>获取OAuth令牌.</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="title"><a href="../../https@github.com/cuba-platform/sample-social-login/blob/master/modules/web/src/com/company/demo/restapi/facebookauthenticationcontroller.java">FacebookAuthenticationController.java</a></div>
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@RequestMapping</span>(method = RequestMethod.GET)
<span class="directive">public</span> ResponseEntity get() {
    <span class="predefined-type">String</span> loginUrl = getAsPrivilegedUser(() -&gt;
            facebookService.getLoginUrl(getAppUrl(), OAuth2ResponseType.CODE_TOKEN)
    );

    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();
    headers.set(HttpHeaders.LOCATION, loginUrl);
    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(headers, HttpStatus.FOUND);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p title="Here we check the Facebook code, obtain an access code and issue the access token using OAuthTokenIssuer :">在这里，我们检查Facebook代码，获取访问代码并使用<code>OAuthTokenIssuer</code>发出访问令牌：</p>
</div>
<div class="listingblock">
<div class="title"><a href="../../https@github.com/cuba-platform/sample-social-login/blob/master/modules/web/src/com/company/demo/restapi/facebookauthenticationcontroller.java">FacebookAuthenticationController.java</a></div>
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@RequestMapping</span>(method = RequestMethod.POST, value = <span class="string"><span class="delimiter">"</span><span class="content">login</span><span class="delimiter">"</span></span>)
<span class="directive">public</span> ResponseEntity&lt;OAuth2AccessToken&gt; login(<span class="annotation">@RequestParam</span>(<span class="string"><span class="delimiter">"</span><span class="content">code</span><span class="delimiter">"</span></span>) <span class="predefined-type">String</span> code) {
    User user = getAsPrivilegedUser(() -&gt; {
        FacebookUserData userData = facebookService.getUserData(getAppUrl(), code);

        <span class="keyword">return</span> socialRegistrationService.findOrRegisterUser(
            userData.getId(), userData.getEmail(), userData.getName());
    });

    OAuth2AccessTokenResult tokenResult = oAuthTokenIssuer.issueToken(user.getLogin(),
            messageTools.getDefaultLocale(), <span class="predefined-type">Collections</span>.emptyMap());

    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();
    headers.set(HttpHeaders.CACHE_CONTROL, <span class="string"><span class="delimiter">"</span><span class="content">no-store</span><span class="delimiter">"</span></span>);
    headers.set(HttpHeaders.PRAGMA, <span class="string"><span class="delimiter">"</span><span class="content">no-cache</span><span class="delimiter">"</span></span>);
    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(tokenResult.getAccessToken(), headers, HttpStatus.OK);
}</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p title="Exclude the restapi package from scanning in web/core modules: the OAuthTokenIssuer bean is available only in REST API context, and scanning for it in the application context will cause an error.">将<code>restapi</code>软件包排除在<strong>Web /核心</strong>模块的扫描范围之外： <code>OAuthTokenIssuer</code> Bean仅在REST API上下文中可用，而在应用程序上下文中对其进行扫描将导致错误.</p>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;context:component-scan</span> <span class="attribute-name">base-package</span>=<span class="string"><span class="delimiter">"</span><span class="content">com.company.demo</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;context:exclude-filter</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">"</span><span class="content">regex</span><span class="delimiter">"</span></span> <span class="attribute-name">expression</span>=<span class="string"><span class="delimiter">"</span><span class="content">com\.company\.demo\.restapi\..*</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
<span class="tag">&lt;/context:component-scan&gt;</span></code></pre>
</div>
</div>
</li>
<li>
<p title="Create the facebook-login-demo.html file in the modules/web/web/VAADIN folder of your project. It will contain the JavaScript code running on HTML page:"> 在您的项目的<code>modules/web/web/VAADIN</code>文件夹中创建<code>facebook-login-demo.html</code>文件.  它将包含在HTML页面上运行的JavaScript代码：</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="title"><a href="../../https@github.com/cuba-platform/sample-social-login/blob/master/modules/web/web/vaadin/facebook-login-demo.html">facebook-login-demo.html</a></div>
<div class="content">
<pre class="CodeRay highlight"><code data-lang="html"><span class="tag">&lt;html&gt;</span>
<span class="tag">&lt;head&gt;</span>
    <span class="tag">&lt;title&gt;</span>Facebook login demo with REST-API<span class="tag">&lt;/title&gt;</span>
    <span class="tag">&lt;script</span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">"</span><span class="content">jquery-3.2.1.min.js</span><span class="delimiter">"</span></span><span class="tag">&gt;</span><span class="tag">&lt;/script&gt;</span>
    <span class="tag">&lt;style</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">"</span><span class="content">text/css</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
<span class="inline">        <span class="id">#users</span> {
            <span class="key">display</span>: <span class="value">none</span>;
        }</span>
    <span class="tag">&lt;/style&gt;</span>
<span class="tag">&lt;/head&gt;</span>
<span class="tag">&lt;body&gt;</span>
<span class="tag">&lt;h1&gt;</span>Facebook login demo with REST-API<span class="tag">&lt;/h1&gt;</span>

<span class="tag">&lt;script</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">"</span><span class="content">application/javascript</span><span class="delimiter">"</span></span><span class="attribute-name">...</span><span class="tag">&gt;</span>
<span class="tag">&lt;/script&gt;</span>

<span class="tag">&lt;a</span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">"</span><span class="content">fbLink</span><span class="delimiter">"</span></span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">"</span><span class="content">/app/rest/facebook</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>Login with Facebook<span class="tag">&lt;/a&gt;</span>

<span class="tag">&lt;div</span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">"</span><span class="content">users</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
    You are logged in!

    <span class="tag">&lt;h1&gt;</span>Users<span class="tag">&lt;/h1&gt;</span>

    <span class="tag">&lt;div</span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">"</span><span class="content">usersList</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;/div&gt;</span>
<span class="tag">&lt;/div&gt;</span>

<span class="tag">&lt;/body&gt;</span>
<span class="tag">&lt;/html&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p title="The following script will try to login with Facebook. Firstly, it will remove code parameters from URL, then it will pass the code to REST API to get an OAuth access token, and in case of successful authentication we will be able to load and save data as usual."> 以下脚本将尝试使用Facebook登录.  首先，它将从URL中删除代码参数，然后将代码传递给REST API以获取OAuth访问令牌，并且如果身份验证成功，我们将能够照常加载和保存数据.</p>
</div>
<div class="listingblock">
<div class="title"><a href="../../https@github.com/cuba-platform/sample-social-login/blob/master/modules/web/web/vaadin/facebook-login-demo.html">facebook-login-demo.html</a></div>
<div class="content">
<pre class="CodeRay highlight"><code data-lang="js"><span class="keyword">var</span> oauth2Token = <span class="predefined-constant">null</span>;

<span class="keyword">function</span> <span class="function">tryToLoginWithFacebook</span>() {
    <span class="keyword">var</span> urlHash = window.location.hash;

    <span class="keyword">if</span> (urlHash &amp;&amp; urlHash.indexOf(<span class="string"><span class="delimiter">'</span><span class="content">&amp;code=</span><span class="delimiter">'</span></span>) &gt;= <span class="integer">0</span>) {
        console.log(<span class="string"><span class="delimiter">"</span><span class="content">Try to login to CUBA REST-API!</span><span class="delimiter">"</span></span>);

        <span class="keyword">var</span> urlCode = urlHash.substring(urlHash.indexOf(<span class="string"><span class="delimiter">'</span><span class="content">&amp;code=</span><span class="delimiter">'</span></span>) + <span class="string"><span class="delimiter">'</span><span class="content">&amp;code=</span><span class="delimiter">'</span></span>.length);
        console.log(<span class="string"><span class="delimiter">"</span><span class="content">Facebook code: </span><span class="delimiter">"</span></span> + urlCode);

        history.pushState(<span class="string"><span class="delimiter">"</span><span class="delimiter">"</span></span>, document.title, window.location.pathname);

        <span class="predefined">$</span>.post({
            <span class="key">url</span>: <span class="string"><span class="delimiter">'</span><span class="content">/app/rest/facebook/login</span><span class="delimiter">'</span></span>,
            <span class="key">headers</span>: {
                <span class="key"><span class="delimiter">'</span><span class="content">Content-Type</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">application/x-www-form-urlencoded</span><span class="delimiter">'</span></span>
            },
            <span class="key">dataType</span>: <span class="string"><span class="delimiter">'</span><span class="content">json</span><span class="delimiter">'</span></span>,
            <span class="key">data</span>: {<span class="key">code</span>: urlCode},
            <span class="function">success</span>: <span class="keyword">function</span> (data) {
                oauth2Token = data.access_token;

                loadUsers();
            }
        })
    }
}

<span class="keyword">function</span> <span class="function">loadUsers</span>() {
    <span class="predefined">$</span>.get({
        <span class="key">url</span>: <span class="string"><span class="delimiter">'</span><span class="content">/app/rest/v2/entities/sec$User?view=_local</span><span class="delimiter">'</span></span>,
        <span class="key">headers</span>: {
            <span class="key"><span class="delimiter">'</span><span class="content">Authorization</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">Bearer </span><span class="delimiter">'</span></span> + oauth2Token,
            <span class="key"><span class="delimiter">'</span><span class="content">Content-Type</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">application/x-www-form-urlencoded</span><span class="delimiter">'</span></span>
        },
        <span class="function">success</span>: <span class="keyword">function</span> (data) {
            <span class="predefined">$</span>(<span class="string"><span class="delimiter">'</span><span class="content">#fbLink</span><span class="delimiter">'</span></span>).hide();
            <span class="predefined">$</span>(<span class="string"><span class="delimiter">'</span><span class="content">#users</span><span class="delimiter">'</span></span>).show();

            <span class="predefined">$</span>.each(data, <span class="keyword">function</span> (i, user) {
                <span class="predefined">$</span>(<span class="string"><span class="delimiter">'</span><span class="content">#usersList</span><span class="delimiter">'</span></span>).append(<span class="string"><span class="delimiter">"</span><span class="content">&lt;li&gt;</span><span class="delimiter">"</span></span> + user.name + <span class="string"><span class="delimiter">"</span><span class="content"> (</span><span class="delimiter">"</span></span> + user.email + <span class="string"><span class="delimiter">"</span><span class="content">)&lt;/li&gt;</span><span class="delimiter">"</span></span>);
            });
        }
    });
}

tryToLoginWithFacebook();</code></pre>
</div>
</div>
<div class="paragraph">
<p title="Another example or running a JavaScript code from CUBA applications you can find in the JavaScript Usage Example section.">您可以在" <a href="#rest_api_v2_ex_javascript_usage">JavaScript使用示例"</a>部分中找到另一个示例或从CUBA应用程序运行JavaScript代码.</p>
</div>
</div>
</div>
</li>
</ol>
</div>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_ex_get_entities_list"><a class="anchor" href="#rest_api_v2_ex_get_entities_list"></a><a class="link" href="#rest_api_v2_ex_get_entities_list">4.4. Getting an Entity Instances List</a></h3>
<div class="paragraph">
<p title="Let’s suppose that the system has a sales$Order entity and we need to get a list of this entity instances. Besides, we need to get not all the records, but only 50 records, starting with the 100th one. A response must contain not only simple properties of the sales$Order entity but also an information about the order customer (a reference field named customer ). Orders must be sorted by date."> 假设系统有一个<code>sales$Order</code>实体，我们需要获取此实体实例的列表.  此外，从第100个记录开始，我们不需要获取所有记录，而仅获取50条记录.  响应不仅必须包含<code>sales$Order</code>实体的简单属性，而且还必须包含有关订单客户的信息（一个名为<code>customer</code>的参考字段）.  订单必须按日期排序.</p>
</div>
<div class="paragraph">
<p title="A base URL for getting all instances of the sales$Order entity is as follows:">用于获取<code>sales$Order</code>实体的所有实例的基本URL如下：</p>
</div>
<div class="paragraph">
<p><code>http://localhost:8080/app/rest/v2/entities/sales$Order</code></p>
</div>
<div class="paragraph">
<p title="To implement all the conditions described above the following request parameters must be specified:">要实现上述所有条件，必须指定以下请求参数：</p>
</div>
<div class="ulist">
<ul>
<li>
<p title="view - a view , that will be used for loading entities. In our case the order-edit-view contains a customer reference."> <strong>view-</strong>一个<a href="#views">view</a> ，将用于加载实体.  在我们的案例中， <code>order-edit-view</code>包含<code>customer</code>参考.</p>
</li>
<li>
<p title="limit - a number of instances to be returned."><strong>limit-</strong>要返回的实例数.</p>
</li>
<li>
<p title="offset - a position of the first extracted record."><strong>offset-</strong>第一个提取记录的位置.</p>
</li>
<li>
<p title="sort - an entity attribute name that will be used for sorting."><strong>sort-</strong>将用于<strong>排序</strong>的实体属性名称.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p title="An OAuth token must be put in the Authorization header with the Bearer type:">必须将OAuth令牌放置在<code>Bearer</code>类型的<code>Authorization</code>标头中：</p>
</div>
<div class="literalblock">
<div class="content">
<pre>Authorization: Bearer 29bc6b45-83cd-4050-8c7a-2a8a60adf251</pre>
</div>
</div>
<div class="paragraph">
<p title="As a result, we get the following GET request URL:">结果，我们得到以下<strong>GET</strong>请求URL：</p>
</div>
<div class="paragraph">
<p><code>http://localhost:8080/app/rest/v2/entities/sales$Order?view=order-edit-view&amp;limit=50&amp;offset=100&amp;sort=date</code></p>
</div>
<div class="paragraph">
<p title="Using cURL , the request will look like:">使用<a href="../../https@curl.haxx.se/default.htm">cURL</a> ，请求将如下所示：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="plain">curl -H "Authorization: Bearer d335902c-9cb4-455e-bf92-24ca1d66d72f" http://localhost:8080/app/rest/v2/entities/sales$Order?view=order-edit&amp;limit=50&amp;offset=100&amp;sort=date</code></pre>
</div>
</div>
<div class="paragraph">
<p title="The response will be like this:">响应将是这样的：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="json">[
  {
    <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$Order</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">_instanceName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">00001</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">46322d73-2374-1d65-a5f2-160461da22bf</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">date</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-10-31</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">description</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Vacation order</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">number</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">00001</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">items</span><span class="delimiter">"</span></span>: [
      {
        <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$OrderItem</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">_instanceName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Beach umbrella</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">95a04f46-af7a-a307-de4e-f2d73cfc74f7</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">price</span><span class="delimiter">"</span></span>: <span class="integer">23</span>,
        <span class="key"><span class="delimiter">"</span><span class="content">name</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Beach umbrella</span><span class="delimiter">"</span></span>
      },
      {
        <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$OrderItem</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">_instanceName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Sun lotion</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">a2129675-d158-9e3a-5496-41bf1a315917</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">price</span><span class="delimiter">"</span></span>: <span class="float">9.9</span>,
        <span class="key"><span class="delimiter">"</span><span class="content">name</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Sun lotion</span><span class="delimiter">"</span></span>
      }
    ],
    <span class="key"><span class="delimiter">"</span><span class="content">customer</span><span class="delimiter">"</span></span>: {
      <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$Customer</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">_instanceName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Toby Burns</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">4aa9a9d8-01df-c8df-34c8-c385b566ea05</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">firstName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Toby</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">lastName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Burns</span><span class="delimiter">"</span></span>
    }
  },
  {
    <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$Order</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">_instanceName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">00002</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">b2ad3059-384c-3e03-b62d-b8c76621b4a8</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">date</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-12-31</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">description</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">New Year party set</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">number</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">00002</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">items</span><span class="delimiter">"</span></span>: [
      {
        <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$OrderItem</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">_instanceName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Jack Daniels</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">0c566c9d-7078-4567-a85b-c67a44f9d5fe</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">price</span><span class="delimiter">"</span></span>: <span class="float">50.7</span>,
        <span class="key"><span class="delimiter">"</span><span class="content">name</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Jack Daniels</span><span class="delimiter">"</span></span>
      },
      {
        <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$OrderItem</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">_instanceName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Hennessy X.O</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">c01be87b-3f91-7a86-50b5-30f2f0a49127</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">price</span><span class="delimiter">"</span></span>: <span class="float">79.9</span>,
        <span class="key"><span class="delimiter">"</span><span class="content">name</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Hennessy X.O</span><span class="delimiter">"</span></span>
      }
    ],
    <span class="key"><span class="delimiter">"</span><span class="content">customer</span><span class="delimiter">"</span></span>: {
      <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$Customer</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">_instanceName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Morgan Collins</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">5d111245-2ed0-abec-3bee-1a196da92e3e</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">firstName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Morgan</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">lastName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Collins</span><span class="delimiter">"</span></span>
    }
  }
]</code></pre>
</div>
</div>
<div class="paragraph">
<p title="Please note, that every entity in the response has a _entityName attribute with the entity name and an _instanceName attribute with the entity 实例名称 .">请注意，响应中的每个实体都有一个带有实体名称的<code>_entityName</code>属性和一个带有实体<a href="#namePattern_annotation">实例名称</a>的<code>_instanceName</code>属性.</p>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_ex_create_entity"><a class="anchor" href="#rest_api_v2_ex_create_entity"></a><a class="link" href="#rest_api_v2_ex_create_entity">4.5. New Entity Instance Creation</a></h3>
<div class="paragraph">
<p title="New sales$Order entity instance can be created with the POST request on the address:">可以使用地址上的<strong>POST</strong>请求创建新的<code>sales$Order</code>实体实例：</p>
</div>
<div class="paragraph">
<p><code>http://localhost:8080/app/rest/v2/entities/sales$Order</code></p>
</div>
<div class="paragraph">
<p title="An OAuth token must be put in the Authorization header with the Bearer type.">必须将OAuth令牌与<code>Bearer</code>类型一起放入<code>Authorization</code>标头中.</p>
</div>
<div class="paragraph">
<p title="The request body must contain a JSON object that describes a new entity instance, e.g.:">请求正文必须包含描述新实体实例的JSON对象，例如：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">"</span><span class="content">number</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">00017</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">date</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-09-01</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">description</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Back to school</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">items</span><span class="delimiter">"</span></span>: [
    {
      <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$OrderItem</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">price</span><span class="delimiter">"</span></span>: <span class="integer">100</span>,
      <span class="key"><span class="delimiter">"</span><span class="content">name</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">School bag</span><span class="delimiter">"</span></span>
    },
    {
      <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$OrderItem</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">price</span><span class="delimiter">"</span></span>: <span class="float">9.90</span>,
      <span class="key"><span class="delimiter">"</span><span class="content">name</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Pencils</span><span class="delimiter">"</span></span>
    }
  ],
  <span class="key"><span class="delimiter">"</span><span class="content">customer</span><span class="delimiter">"</span></span>: {
    <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">4aa9a9d8-01df-c8df-34c8-c385b566ea05</span><span class="delimiter">"</span></span>
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p title="Below is an example of cURL POST request that creates a new Order instance:">以下是创建新的<code>Order</code>实例的<a href="../../https@curl.haxx.se/default.htm">cURL</a> POST请求的示例：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="plain">curl -H "Authorization: Bearer d335902c-9cb4-455e-bf92-24ca1d66d72f" -H "Content-Type: application/json" -X POST -d "{\"date\": \"2018-10-12 15:47:28\", \"amount\":  9.90, \"customer\": {\"id\": \"383ebce2-b295-7378-36a1-bcf93693821f\"}}" http://localhost:8080/app/rest/v2/entities/sales$Order</code></pre>
</div>
</div>
<div class="paragraph">
<p title="A collection of order items (items ) and a customer reference are passed in the request body. Let’s examine how these attributes will be processed."> 的订单项目（A集合<code>items</code> ）和<code>customer</code>参考在请求体传递.  让我们研究一下如何处理这些属性.</p>
</div>
<div class="paragraph">
<p title="First, let’s have a quick look to the Order class:">首先，让我们快速浏览一下<code>Order</code>类：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="keyword">package</span> <span class="namespace">com.company.sales.entity</span>;

<span class="keyword">import</span> <span class="include">com.haulmont.chile.core.annotations.Composition</span>;
<span class="keyword">import</span> <span class="include">com.haulmont.chile.core.annotations.NamePattern</span>;
<span class="keyword">import</span> <span class="include">com.haulmont.cuba.core.entity.StandardEntity</span>;
<span class="keyword">import</span> <span class="include">com.haulmont.cuba.core.entity.annotation.OnDelete</span>;
<span class="keyword">import</span> <span class="include">com.haulmont.cuba.core.global.DeletePolicy</span>;

<span class="keyword">import</span> <span class="include">javax.persistence</span>.*;
<span class="keyword">import</span> <span class="include">java.util.Date</span>;
<span class="keyword">import</span> <span class="include">java.util.Set</span>;

<span class="annotation">@NamePattern</span>(<span class="string"><span class="delimiter">"</span><span class="content">%s|number</span><span class="delimiter">"</span></span>)
<span class="annotation">@Table</span>(name = <span class="string"><span class="delimiter">"</span><span class="content">SALES_ORDER</span><span class="delimiter">"</span></span>)
<span class="annotation">@Entity</span>(name = <span class="string"><span class="delimiter">"</span><span class="content">sales$Order</span><span class="delimiter">"</span></span>)
<span class="directive">public</span> <span class="type">class</span> <span class="class">Order</span> <span class="directive">extends</span> StandardEntity {
    <span class="directive">private</span> <span class="directive">static</span> <span class="directive">final</span> <span class="type">long</span> serialVersionUID = <span class="integer">7565070704618724997L</span>;

    <span class="annotation">@Column</span>(name = <span class="string"><span class="delimiter">"</span><span class="content">NUMBER_</span><span class="delimiter">"</span></span>)
    <span class="directive">protected</span> <span class="predefined-type">String</span> number;

    <span class="annotation">@Temporal</span>(TemporalType.DATE)
    <span class="annotation">@Column</span>(name = <span class="string"><span class="delimiter">"</span><span class="content">DATE_</span><span class="delimiter">"</span></span>)
    <span class="directive">protected</span> <span class="predefined-type">Date</span> date;

    <span class="annotation">@Column</span>(name = <span class="string"><span class="delimiter">"</span><span class="content">DESCRIPTION</span><span class="delimiter">"</span></span>)
    <span class="directive">protected</span> <span class="predefined-type">String</span> description;

    <span class="annotation">@ManyToOne</span>(fetch = FetchType.LAZY)
    <span class="annotation">@JoinColumn</span>(name = <span class="string"><span class="delimiter">"</span><span class="content">CUSTOMER_ID</span><span class="delimiter">"</span></span>)
    <span class="directive">protected</span> Customer customer;

    <span class="annotation">@Composition</span>
    <span class="annotation">@OnDelete</span>(DeletePolicy.CASCADE)
    <span class="annotation">@OneToMany</span>(mappedBy = <span class="string"><span class="delimiter">"</span><span class="content">order</span><span class="delimiter">"</span></span>)
    <span class="directive">protected</span> <span class="predefined-type">Set</span>&lt;OrderItem&gt; items;

    <span class="comment">//getters and setters omitted</span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p title="The items collection property is annotated with the @Composition . REST API methods for entity creation and update will create a new entity instances for all members of such collections. In our case, two instances of OrderItem entity will be created with the Order entity."> <code>items</code>集合属性用<a href="#composition_annotation">@Composition</a>注释.  用于实体创建和更新的REST API方法将为此类集合的所有成员创建一个新的实体实例.  在我们的示例中，将使用<code>Order</code>实体创建<code>OrderItem</code>实体的两个实例.</p>
</div>
<div class="paragraph">
<p title="The customer reference doesn’t have a @Composition annotation, that’s why the REST API will try to find a client with the given id and set it to the customer field. If the client is not found then an order won’t be created and the method will return an error."> <code>customer</code>引用没有<code>@Composition</code>注释，这就是REST API会尝试查找具有给定id的客户端并将其设置为<code>customer</code>字段的原因.  如果找不到客户端，则不会创建订单，该方法将返回错误.</p>
</div>
<div class="paragraph">
<p title="In case of successful method execution a full object graph of the created entity is returned:">如果成功执行方法，则返回创建实体的完整对象图：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$Order</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">5d7ff8e3-7828-ba94-d6ba-155c5c4f2a50</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">date</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-09-01</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">description</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Back to school</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">version</span><span class="delimiter">"</span></span>: <span class="integer">1</span>,
  <span class="key"><span class="delimiter">"</span><span class="content">number</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">00017</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">createdBy</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">admin</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">createTs</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-10-13 18:12:21.047</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">updateTs</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-10-13 18:12:21.047</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">items</span><span class="delimiter">"</span></span>: [
    {
      <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$OrderItem</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">3158b8ed-7b7a-568e-aec5-0822c3ebbc24</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">createdBy</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">admin</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">price</span><span class="delimiter">"</span></span>: <span class="float">9.9</span>,
      <span class="key"><span class="delimiter">"</span><span class="content">name</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Pencils</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">createTs</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-10-13 18:12:21.047</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">version</span><span class="delimiter">"</span></span>: <span class="integer">1</span>,
      <span class="key"><span class="delimiter">"</span><span class="content">updateTs</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-10-13 18:12:21.047</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">order</span><span class="delimiter">"</span></span>: {
        <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$Order</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">5d7ff8e3-7828-ba94-d6ba-155c5c4f2a50</span><span class="delimiter">"</span></span>
      }
    },
    {
      <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$OrderItem</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">72774b8b-4fea-6403-7b52-4a6a749215fc</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">createdBy</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">admin</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">price</span><span class="delimiter">"</span></span>: <span class="integer">100</span>,
      <span class="key"><span class="delimiter">"</span><span class="content">name</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">School bag</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">createTs</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-10-13 18:12:21.047</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">version</span><span class="delimiter">"</span></span>: <span class="integer">1</span>,
      <span class="key"><span class="delimiter">"</span><span class="content">updateTs</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-10-13 18:12:21.047</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">order</span><span class="delimiter">"</span></span>: {
        <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$Order</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">5d7ff8e3-7828-ba94-d6ba-155c5c4f2a50</span><span class="delimiter">"</span></span>
      }
    }
  ],
  <span class="key"><span class="delimiter">"</span><span class="content">customer</span><span class="delimiter">"</span></span>: {
    <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$Customer</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">4aa9a9d8-01df-c8df-34c8-c385b566ea05</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">firstName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Toby</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">lastName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Burns</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">createdBy</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">admin</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">createTs</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-10-13 15:32:01.657</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">version</span><span class="delimiter">"</span></span>: <span class="integer">1</span>,
    <span class="key"><span class="delimiter">"</span><span class="content">updateTs</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-10-13 15:32:01.657</span><span class="delimiter">"</span></span>
  }
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_ex_update_entity"><a class="anchor" href="#rest_api_v2_ex_update_entity"></a><a class="link" href="#rest_api_v2_ex_update_entity">4.6. Existing Entity Instance Update</a></h3>
<div class="paragraph">
<p title="An existing sales$Order entity instance can be updated with the PUT request on the address:">可以使用地址上的<strong>PUT</strong>请求来更新现有的<code>sales$Order</code>实体实例：</p>
</div>
<div class="paragraph">
<p><code>http://localhost:8080/app/rest/v2/entities/sales$Order/5d7ff8e3-7828-ba94-d6ba-155c5c4f2a50</code></p>
</div>
<div class="paragraph">
<p title="The last part of the query here is the entity identifier.">查询的最后一部分是实体标识符.</p>
</div>
<div class="paragraph">
<p title="An OAuth token must be put in the Authorization header with the Bearer type.">必须将OAuth令牌与<code>Bearer</code>类型一起放入<code>Authorization</code>标头中.</p>
</div>
<div class="paragraph">
<p title="The request body must contain a JSON object containing only fields we want to update, e.g.:">请求正文必须包含一个JSON对象，该对象仅包含我们要更新的字段，例如：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">"</span><span class="content">date</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2017-10-01</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">customer</span><span class="delimiter">"</span></span> : {
    <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span> : <span class="string"><span class="delimiter">"</span><span class="content">5d111245-2ed0-abec-3bee-1a196da92e3e</span><span class="delimiter">"</span></span>
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p title="The response body will contain a modified entity:">响应主体将包含一个修改后的实体：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$Order</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">5d7ff8e3-7828-ba94-d6ba-155c5c4f2a50</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">date</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2017-10-01</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">updatedBy</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">admin</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">description</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Back to school</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">version</span><span class="delimiter">"</span></span>: <span class="integer">2</span>,
  <span class="key"><span class="delimiter">"</span><span class="content">number</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">00017</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">createdBy</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">admin</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">createTs</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-10-13 18:12:21.047</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">updateTs</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-10-13 19:13:02.656</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">customer</span><span class="delimiter">"</span></span>: {
    <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$Customer</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">5d111245-2ed0-abec-3bee-1a196da92e3e</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">firstName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Morgan</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">lastName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Collins</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">createdBy</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">admin</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">createTs</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-10-13 15:31:27.821</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">version</span><span class="delimiter">"</span></span>: <span class="integer">1</span>,
    <span class="key"><span class="delimiter">"</span><span class="content">updateTs</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-10-13 15:31:27.821</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">email</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">collins@gmail.com</span><span class="delimiter">"</span></span>
  }
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_ex_query_get"><a class="anchor" href="#rest_api_v2_ex_query_get"></a><a class="link" href="#rest_api_v2_ex_query_get">4.7. Executing a JPQL Query (GET)</a></h3>
<div class="paragraph">
<p title="Before the execution with the REST API a query must be described in the configuration file . The rest-queries.xml file must be created in the main package of the web module (e.g. com.company.sales ). Then the file must be defined in the application properties file of the web module (web-app.properties)."> 在使用REST API执行之前，必须在<a href="#rest_api_v2_queries_config">配置文件中</a>描述查询.  必须在<strong>Web</strong>模块的主包中创建<code>rest-queries.xml</code>文件（例如<code>com.company.sales</code> ）.  然后，必须在<strong>Web</strong>模块的应用程序属性文件（web-app.properties）中定义该文件.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="properties">cuba.rest.queriesConfig = +com/company/sales/rest-queries.xml</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>rest-queries.xml</code> contents:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="preprocessor">&lt;?xml version="1.0"?&gt;</span>
<span class="tag">&lt;queries</span> <span class="attribute-name">xmlns</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://schemas.haulmont.com/cuba/rest-queries.xsd</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;query</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">ordersAfterDate</span><span class="delimiter">"</span></span> <span class="attribute-name">entity</span>=<span class="string"><span class="delimiter">"</span><span class="content">sales$Order</span><span class="delimiter">"</span></span> <span class="attribute-name">view</span>=<span class="string"><span class="delimiter">"</span><span class="content">order-edit-view</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;jpql&gt;</span><span class="inline-delimiter">&lt;![CDATA[</span>select o from sales$Order o where o.date &gt;= :startDate and o.date &lt;= :endDate<span class="inline-delimiter">]]&gt;</span><span class="tag">&lt;/jpql&gt;</span>
        <span class="tag">&lt;params&gt;</span>
            <span class="tag">&lt;param</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">startDate</span><span class="delimiter">"</span></span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">"</span><span class="content">java.util.Date</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
            <span class="tag">&lt;param</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">endDate</span><span class="delimiter">"</span></span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">"</span><span class="content">java.util.Date</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;/params&gt;</span>
    <span class="tag">&lt;/query&gt;</span>
<span class="tag">&lt;/queries&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p title="To execute a JPQL query the following GET request must be executed:">要执行JPQL查询，必须执行以下<strong>GET</strong>请求：</p>
</div>
<div class="paragraph">
<p><code>http://localhost:8080/app/rest/v2/queries/sales$Order/ordersAfterDate?startDate=2016-11-01&amp;endDate=2017-11-01</code></p>
</div>
<div class="paragraph">
<p title="The request URL parts:">请求网址部分：</p>
</div>
<div class="ulist">
<ul>
<li>
<p title="sales$Order - extracted entity name."><code>sales$Order</code>提取的实体名称.</p>
</li>
<li>
<p title="ordersAfterDate - a query name from the configuration file."><code>ordersAfterDate</code>配置文件中的查询名称.</p>
</li>
<li>
<p><code>startDate</code> and <code>endDate</code> - request parameters with the values.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p title="An OAuth token must be put in the Authorization header with the Bearer type.">必须将OAuth令牌与<code>Bearer</code>类型一起放入<code>Authorization</code>标头中.</p>
</div>
<div class="paragraph">
<p title="The method returns a JSON array of extracted entity instances:">该方法返回提取的实体实例的JSON数组：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="json">[
  {
    <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$Order</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">_instanceName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">00002</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">b2ad3059-384c-3e03-b62d-b8c76621b4a8</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">date</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-12-31</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">description</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">New Year party set</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">number</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">00002</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">items</span><span class="delimiter">"</span></span>: [
      {
        <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$OrderItem</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">_instanceName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Jack Daniels</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">0c566c9d-7078-4567-a85b-c67a44f9d5fe</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">price</span><span class="delimiter">"</span></span>: <span class="float">50.7</span>,
        <span class="key"><span class="delimiter">"</span><span class="content">name</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Jack Daniels</span><span class="delimiter">"</span></span>
      },
      {
        <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$OrderItem</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">_instanceName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Hennessy X.O</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">c01be87b-3f91-7a86-50b5-30f2f0a49127</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">price</span><span class="delimiter">"</span></span>: <span class="float">79.9</span>,
        <span class="key"><span class="delimiter">"</span><span class="content">name</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Hennessy X.O</span><span class="delimiter">"</span></span>
      }
    ],
    <span class="key"><span class="delimiter">"</span><span class="content">customer</span><span class="delimiter">"</span></span>: {
      <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$Customer</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">_instanceName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Morgan Collins</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">5d111245-2ed0-abec-3bee-1a196da92e3e</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">firstName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Morgan</span><span class="delimiter">"</span></span>,
      <span class="key"><span class="delimiter">"</span><span class="content">lastName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Collins</span><span class="delimiter">"</span></span>
    }
  }
]</code></pre>
</div>
</div>
<div class="paragraph">
<p title="A full list of possible request parameters is available in the Swagger documentation ."><a href="../../files.cuba-platform.com/swagger/7.1">Swagger文档中</a>提供了可能的请求参数的完整列表.</p>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_ex_query_post"><a class="anchor" href="#rest_api_v2_ex_query_post"></a><a class="link" href="#rest_api_v2_ex_query_post">4.8. Executing a JPQL Query (POST)</a></h3>
<div class="paragraph">
<p title="It is also possible to execute a query with POST HTTP request. POST request can be used when you need to pass a collection as query parameter value. In this case, the type of the query parameter in REST queries configuration file must end with square brackets: java.lang.String[] , java.util.UUID[] , etc."> 也可以使用POST HTTP请求执行查询.  当您需要将集合作为查询参数值传递时，可以使用POST请求.  在这种情况下，REST查询配置文件中查询参数的类型必须以方括号结尾： <code>java.lang.String[]</code> ， <code>java.util.UUID[]</code>等.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="preprocessor">&lt;?xml version="1.0"?&gt;</span>
<span class="tag">&lt;queries</span> <span class="attribute-name">xmlns</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://schemas.haulmont.com/cuba/rest-queries.xsd</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;query</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">ordersByIds</span><span class="delimiter">"</span></span> <span class="attribute-name">entity</span>=<span class="string"><span class="delimiter">"</span><span class="content">sales$Order</span><span class="delimiter">"</span></span> <span class="attribute-name">view</span>=<span class="string"><span class="delimiter">"</span><span class="content">order-edit-view</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;jpql&gt;</span><span class="inline-delimiter">&lt;![CDATA[</span>select o from sales$Order o where o.id in :ids and o.status = :status<span class="inline-delimiter">]]&gt;</span><span class="tag">&lt;/jpql&gt;</span>
        <span class="tag">&lt;params&gt;</span>
            <span class="tag">&lt;param</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">ids</span><span class="delimiter">"</span></span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">"</span><span class="content">java.util.UUID[]</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
            <span class="tag">&lt;param</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">status</span><span class="delimiter">"</span></span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">"</span><span class="content">java.lang.String</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;/params&gt;</span>
    <span class="tag">&lt;/query&gt;</span>
<span class="tag">&lt;/queries&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p title="Query parameters values must be passed in the request body as JSON map:">查询参数值必须在请求主体中作为JSON映射传递：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">"</span><span class="content">ids</span><span class="delimiter">"</span></span>: [<span class="string"><span class="delimiter">"</span><span class="content">c273fca1-33c2-0229-2a0c-78bc6d09110a</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">e6c04c18-c8a1-b741-7363-a2d58589d800</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">d268a4e1-f316-a7c8-7a96-87ba06afbbbd</span><span class="delimiter">"</span></span>],
  <span class="key"><span class="delimiter">"</span><span class="content">status</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">ready</span><span class="delimiter">"</span></span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p title="The POST request URL:">POST请求网址：</p>
</div>
<div class="paragraph">
<p><code>http://localhost:8080/app/rest/v2/queries/sales$Order/ordersByIds?returnCount=true</code></p>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_ex_service_get"><a class="anchor" href="#rest_api_v2_ex_service_get"></a><a class="link" href="#rest_api_v2_ex_service_get">4.9. Service Method Invocation (GET)</a></h3>
<div class="paragraph">
<p title="Suppose there is an OrderService service in the system. The implementation looks as follows:"> 假设系统中有一个<code>OrderService</code> <a href="#services">服务</a> .  该实现如下所示：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="keyword">package</span> <span class="namespace">com.company.sales.service</span>;

<span class="keyword">import</span> <span class="include">com.haulmont.cuba.core.EntityManager</span>;
<span class="keyword">import</span> <span class="include">com.haulmont.cuba.core.Persistence</span>;
<span class="keyword">import</span> <span class="include">com.haulmont.cuba.core.Transaction</span>;
<span class="keyword">import</span> <span class="include">org.springframework.stereotype.Service</span>;
<span class="keyword">import</span> <span class="include">javax.inject.Inject</span>;
<span class="keyword">import</span> <span class="include">java.math.BigDecimal</span>;

<span class="annotation">@Service</span>(OrderService.NAME)
<span class="directive">public</span> <span class="type">class</span> <span class="class">OrderServiceBean</span> <span class="directive">implements</span> OrderService {

    <span class="annotation">@Inject</span>
    <span class="directive">private</span> Persistence persistence;

    <span class="annotation">@Override</span>
    <span class="directive">public</span> <span class="predefined-type">BigDecimal</span> calculatePrice(<span class="predefined-type">String</span> orderNumber) {
        <span class="predefined-type">BigDecimal</span> orderPrice = <span class="predefined-constant">null</span>;
        <span class="keyword">try</span> (Transaction tx = persistence.createTransaction()) {
            EntityManager em = persistence.getEntityManager();
            orderPrice = (<span class="predefined-type">BigDecimal</span>) em.createQuery(<span class="string"><span class="delimiter">"</span><span class="content">select sum(oi.price) from sales$OrderItem oi where oi.order.number = :orderNumber</span><span class="delimiter">"</span></span>)
                    .setParameter(<span class="string"><span class="delimiter">"</span><span class="content">orderNumber</span><span class="delimiter">"</span></span>, orderNumber)
                    .getSingleResult();
            tx.commit();
        }

        <span class="keyword">return</span> orderPrice;
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p title="Before the execution with the REST API a service method invocation must be allowed in the configuration file . The rest-services.xml file must be created in the main package of the web module (e.g. com.company.sales ). Then the file must be defined in the application properties file of the web module (web-app.properties)."> 在使用REST API执行之前，必须在<a href="#rest_api_v2_services_config">配置文件中</a>允许调用服务方法.  必须在<strong>Web</strong>模块的主包中创建<code>rest-services.xml</code>文件（例如<code>com.company.sales</code> ）.  然后，必须在<strong>Web</strong>模块的应用程序属性文件（web-app.properties）中定义该文件.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="properties">cuba.rest.servicesConfig = +com/company/sales/rest-services.xml</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>rest-services.xml</code> content:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="preprocessor">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="tag">&lt;services</span> <span class="attribute-name">xmlns</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://schemas.haulmont.com/cuba/rest-services-v2.xsd</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;service</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">sales_OrderService</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;method</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">calculatePrice</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
            <span class="tag">&lt;param</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">orderNumber</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;/method&gt;</span>
    <span class="tag">&lt;/service&gt;</span>
<span class="tag">&lt;/services&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p title="To invoke the service method the following GET request must be executed:">要调用服务方法，必须执行以下<strong>GET</strong>请求：</p>
</div>
<div class="paragraph">
<p><code>http://localhost:8080/app/rest/v2/services/sales_OrderService/calculatePrice?orderNumber=00001</code></p>
</div>
<div class="paragraph">
<p title="The request URL parts:">请求网址部分：</p>
</div>
<div class="ulist">
<ul>
<li>
<p title="sales_OrderService - a service name."><code>sales_OrderService</code>服务名称.</p>
</li>
<li>
<p title="calculatePrice - a method name."><code>calculatePrice</code>方法名称.</p>
</li>
<li>
<p title="orderNumber - an argument name with the value."><code>orderNumber</code>具有值的参数名称.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p title="An OAuth token must be put in the Authorization header with the Bearer type.">必须将OAuth令牌与<code>Bearer</code>类型一起放入<code>Authorization</code>标头中.</p>
</div>
<div class="paragraph">
<p title="A service method may return a result of simple datatype, an entity, an entities collection or a serializable POJO. In our case a BigDecimal is returned, so the response body contains just a number:"> 服务方法可以返回简单数据类型，实体，实体集合或可序列化POJO的结果.  在我们的例子中，返回了一个BigDecimal，因此响应主体仅包含一个数字：</p>
</div>
<div class="literalblock">
<div class="content">
<pre>39.2</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_ex_service_post"><a class="anchor" href="#rest_api_v2_ex_service_post"></a><a class="link" href="#rest_api_v2_ex_service_post">4.10. Service Method Invocation (POST)</a></h3>
<div class="paragraph">
<p title="REST API allows execution not only of methods that have arguments of simple datatypes, but also of methods with the following arguments:">REST API不仅允许执行具有简单数据类型参数的方法，还允许执行具有以下参数的方法：</p>
</div>
<div class="ulist">
<ul>
<li>
<p>entities</p>
</li>
<li>
<p title="entities collections">实体集合</p>
</li>
<li>
<p title="serializable POJOs">可序列化的POJO</p>
</li>
</ul>
</div>
<div class="paragraph">
<p title="Suppose we added a new method to the OrderService created in the previous section:">假设我们<code>OrderService</code>一节中创建的<code>OrderService</code>添加了新方法：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@Override</span>
<span class="directive">public</span> OrderValidationResult validateOrder(Order order, <span class="predefined-type">Date</span> validationDate){
    OrderValidationResult result=<span class="keyword">new</span> OrderValidationResult();
    result.setSuccess(<span class="predefined-constant">false</span>);
    result.setErrorMessage(<span class="string"><span class="delimiter">"</span><span class="content">Validation of order </span><span class="delimiter">"</span></span>+order.getNumber()+<span class="string"><span class="delimiter">"</span><span class="content"> failed. validationDate parameter is: </span><span class="delimiter">"</span></span>+validationDate);
    <span class="keyword">return</span> result;
}</code></pre>
</div>
</div>
<div class="paragraph">
<p title="OrderValidationResult class looks as follows:"><code>OrderValidationResult</code>类的外观如下：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="keyword">package</span> <span class="namespace">com.company.sales.service</span>;

<span class="keyword">import</span> <span class="include">java.io.Serializable</span>;

<span class="directive">public</span> <span class="type">class</span> <span class="class">OrderValidationResult</span> <span class="directive">implements</span> <span class="predefined-type">Serializable</span> {

    <span class="directive">private</span> <span class="type">boolean</span> success;

    <span class="directive">private</span> <span class="predefined-type">String</span> errorMessage;

    <span class="directive">public</span> <span class="type">boolean</span> isSuccess() {
        <span class="keyword">return</span> success;
    }

    <span class="directive">public</span> <span class="type">void</span> setSuccess(<span class="type">boolean</span> success) {
        <span class="local-variable">this</span>.success = success;
    }

    <span class="directive">public</span> <span class="predefined-type">String</span> getErrorMessage() {
        <span class="keyword">return</span> errorMessage;
    }

    <span class="directive">public</span> <span class="type">void</span> setErrorMessage(<span class="predefined-type">String</span> errorMessage) {
        <span class="local-variable">this</span>.errorMessage = errorMessage;
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p title="The new method has an Order entity in the arguments list and returns a POJO.">新方法在参数列表中具有<code>Order</code>实体，并返回POJO.</p>
</div>
<div class="paragraph">
<p title="Before the invocation with the REST API the method must be allowed, so we add a record to the rest-services.xml configuration file (it was described in the Service Method Invocation (GET) ).">在使用REST API调用之前，必须允许该方法，因此我们将一条记录添加到<code>rest-services.xml</code>配置文件中（在<a href="#rest_api_v2_ex_service_get">Service Method Invocation（GET）中</a>进行了描述）.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="preprocessor">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="tag">&lt;services</span> <span class="attribute-name">xmlns</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://schemas.haulmont.com/cuba/rest-services-v2.xsd</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;service</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">sales_OrderService</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;method</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">calculatePrice</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
            <span class="tag">&lt;param</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">orderNumber</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;/method&gt;</span>
        <span class="tag">&lt;method</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">validateOrder</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
            <span class="tag">&lt;param</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">order</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
            <span class="tag">&lt;param</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">validationDate</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;/method&gt;</span>
    <span class="tag">&lt;/service&gt;</span>
<span class="tag">&lt;/services&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p title="The validateOrder service method may be called with the POST request on the address:"><code>validateOrder</code>服务方法可以与地址上的<strong>POST</strong>请求一起调用：</p>
</div>
<div class="paragraph">
<p><code>http://localhost:8080/app/rest/v2/services/sales_OrderService/validateOrder</code></p>
</div>
<div class="paragraph">
<p title="In case of the POST request parameters are passed in the request body. The request body must contain a JSON object, each field of this object corresponds to the service method argument."> 如果是POST，则在请求正文中传递请求参数.  请求主体必须包含一个JSON对象，该对象的每个字段都对应于服务方法参数.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">"</span><span class="content">order</span><span class="delimiter">"</span></span> : {
    <span class="key"><span class="delimiter">"</span><span class="content">number</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">00050</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">date</span><span class="delimiter">"</span></span> : <span class="string"><span class="delimiter">"</span><span class="content">2016-01-01</span><span class="delimiter">"</span></span>
  },
  <span class="key"><span class="delimiter">"</span><span class="content">validationDate</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-10-01</span><span class="delimiter">"</span></span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p title="An OAuth token must be put in the Authorization header with the Bearer type.">必须将OAuth令牌与<code>Bearer</code>类型一起放入<code>Authorization</code>标头中.</p>
</div>
<div class="paragraph">
<p title="The REST API method returns a serialized POJO:">REST API方法返回序列化的POJO：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">"</span><span class="content">success</span><span class="delimiter">"</span></span>: <span class="value">false</span>,
  <span class="key"><span class="delimiter">"</span><span class="content">errorMessage</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Validation of order 00050 failed. validationDate parameter is: 2016-10-01</span><span class="delimiter">"</span></span>
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_ex_file_download"><a class="anchor" href="#rest_api_v2_ex_file_download"></a><a class="link" href="#rest_api_v2_ex_file_download">4.11. Files Downloading</a></h3>
<div class="paragraph">
<p title="When downloading a file , passing a security token in the request header is often inconvenient. It is desirable to have a URL for downloading that may be put to the src attribute of the img tag."> <a href="../../files.cuba-platform.com/swagger/7.1/#!/Files/get_files_id">下载文件时</a> ，在请求标头中传递安全令牌通常很不方便.  希望有一个可下载的URL，该URL可以放在<strong>img</strong>标签的<strong>src</strong>属性中.</p>
</div>
<div class="paragraph">
<p title="As a solution, an OAuth token can also be passed in the request URL as a parameter with the access_token name.">作为解决方案，还可以将<a href="#rest_api_v2_ex_get_token">OAuth令牌</a>作为具有<strong>access_token</strong>名称的参数传递到请求URL中.</p>
</div>
<div class="paragraph">
<p title="For example, an image is uploaded to the application. Its FileDescriptor id is 44809679-e81c-e5ae-dd81-f56f223761d6 ."> 例如，将图像上载到应用程序.  其FileDescriptor ID为<code>44809679-e81c-e5ae-dd81-f56f223761d6</code> .</p>
</div>
<div class="paragraph">
<p title="In this case a URL for downloading the image will look like this:">在这种情况下，用于下载图像的URL将如下所示：</p>
</div>
<div class="paragraph">
<p><code>http://localhost:8080/app/rest/v2/files/44809679-e81c-e5ae-dd81-f56f223761d6?access_token=a2f0bb4e-773f-6b59-3450-3934cbf0a2d6</code></p>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_ex_file_upload"><a class="anchor" href="#rest_api_v2_ex_file_upload"></a><a class="link" href="#rest_api_v2_ex_file_upload">4.12. Files Uploading</a></h3>
<div class="paragraph">
<p title="In order to upload a file, you should get an access token which will be used in the subsequent requests.">为了上传文件，您应该获得一个<a href="#rest_api_v2_ex_get_token">访问令牌</a> ，该<a href="#rest_api_v2_ex_get_token">令牌</a>将在后续请求中使用.</p>
</div>
<div class="paragraph">
<p title="Suppose we have the following form for the file input:">假设我们使用以下形式输入文件：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="html"><span class="tag">&lt;form</span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">"</span><span class="content">fileForm</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;h2&gt;</span>Select a file:<span class="tag">&lt;/h2&gt;</span>
    <span class="tag">&lt;input</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">"</span><span class="content">file</span><span class="delimiter">"</span></span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">file</span><span class="delimiter">"</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">"</span><span class="content">fileUpload</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
    <span class="tag">&lt;br</span><span class="tag">/&gt;</span>
    <span class="tag">&lt;button</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">"</span><span class="content">submit</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>Upload<span class="tag">&lt;/button&gt;</span>
<span class="tag">&lt;/form&gt;</span>

<span class="tag">&lt;h2&gt;</span>Result:<span class="tag">&lt;/h2&gt;</span>
<span class="tag">&lt;img</span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">"</span><span class="content">uploadedFile</span><span class="delimiter">"</span></span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">"</span><span class="delimiter">"</span></span> <span class="attribute-name">style</span>=<span class="string"><span class="delimiter">"</span><span class="key">display</span>: <span class="value">none</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p title="We will use jQuery for the upload and get a JSON with data which is the newly created FileDescriptor instance. We can access the uploaded file by its FileDescriptor id with the access token as a parameter:"> 我们将使用jQuery进行上传，并获取包含<a href="../../files.cuba-platform.com/swagger/7.1/#!/Files/post_files">数据</a>的JSON，该<a href="../../files.cuba-platform.com/swagger/7.1/#!/Files/post_files">数据</a>是新创建的<code>FileDescriptor</code>实例.  我们可以使用其访问令牌作为参数通过其<code>FileDescriptor</code> ID访问上载的文件：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="js"><span class="predefined">$</span>(<span class="string"><span class="delimiter">'</span><span class="content">#fileForm</span><span class="delimiter">'</span></span>).submit(<span class="keyword">function</span> (e) {
    e.preventDefault();

    <span class="keyword">var</span> file = <span class="predefined">$</span>(<span class="string"><span class="delimiter">'</span><span class="content">#fileUpload</span><span class="delimiter">'</span></span>)[<span class="integer">0</span>].files[<span class="integer">0</span>];
    <span class="keyword">var</span> url = <span class="string"><span class="delimiter">'</span><span class="content">http://localhost:8080/app/rest/v2/files?name=</span><span class="delimiter">'</span></span> + file.name; <span class="comment">// send file name as parameter</span>

    <span class="predefined">$</span>.ajax({
        <span class="key">type</span>: <span class="string"><span class="delimiter">'</span><span class="content">POST</span><span class="delimiter">'</span></span>,
        <span class="key">url</span>: url,
        <span class="key">headers</span>: {
            <span class="key"><span class="delimiter">'</span><span class="content">Authorization</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">Bearer </span><span class="delimiter">'</span></span> + oauthToken <span class="comment">// add header with access token</span>
        },
        <span class="key">processData</span>: <span class="predefined-constant">false</span>,
        <span class="key">contentType</span>: <span class="predefined-constant">false</span>,
        <span class="key">dataType</span>: <span class="string"><span class="delimiter">'</span><span class="content">json</span><span class="delimiter">'</span></span>,
        <span class="key">data</span>: file,
        <span class="function">success</span>: <span class="keyword">function</span> (data) {
            alert(<span class="string"><span class="delimiter">'</span><span class="content">Upload successful</span><span class="delimiter">'</span></span>);

            <span class="predefined">$</span>(<span class="string"><span class="delimiter">'</span><span class="content">#uploadedFile</span><span class="delimiter">'</span></span>).attr(<span class="string"><span class="delimiter">'</span><span class="content">src</span><span class="delimiter">'</span></span>,
                <span class="string"><span class="delimiter">'</span><span class="content">http://localhost:8080/app/rest/v2/files/</span><span class="delimiter">'</span></span> + data.id + <span class="string"><span class="delimiter">'</span><span class="content">?access_token=</span><span class="delimiter">'</span></span> + oauthToken); <span class="comment">// update image url</span>
            <span class="predefined">$</span>(<span class="string"><span class="delimiter">'</span><span class="content">#uploadedFile</span><span class="delimiter">'</span></span>).show();
        }
    });
});</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_ex_javascript_usage"><a class="anchor" href="#rest_api_v2_ex_javascript_usage"></a><a class="link" href="#rest_api_v2_ex_javascript_usage">4.13. JavaScript Usage Example</a></h3>
<div class="paragraph">
<p title="This section contains an example of using REST API v2 from JavaScript running on a HTML page. The page initially shows login form, and after successful login displays a message and a list of entities."> 本节包含在HTML页面上运行的JavaScript中使用REST API v2的示例.  该页面最初显示登录表单，成功登录后将显示一条消息和实体列表.</p>
</div>
<div class="paragraph">
<p title="For simplicity, we will use modules/web/web/VAADIN folder for storing HTML/CSS/JavaScript files, as the corresponding folder in the deployed web application is used for serving static resources by default. So you will not need to make any configuration of your Tomcat application server. The resulting URL will start from http://localhost:8080/app/VAADIN , so do not use this approach in a real world application - create a separate web application with its own context instead."> 为简单起见，我们将使用<code>modules/web/web/VAADIN</code>文件夹存储HTML / CSS / JavaScript文件，因为默认情况下，已部署的Web应用程序中的相应文件夹用于提供静态资源.  因此，您无需对Tomcat应用程序服务器进行任何配置.  生成的URL将以<code>http://localhost:8080/app/VAADIN</code> ，因此不要在实际应用程序中使用此方法-而是使用自己的上下文创建一个单独的Web应用程序.</p>
</div>
<div class="paragraph">
<p title="Download jQuery and Bootstrap and copy to modules/web/web/VAADIN folder of your project. Create customers.html and customers.js files, so the content of the folder should look as follows:"> 下载<a href="../../https@jquery.com/download">jQuery</a>和<a href="../../getbootstrap.com/getting-started/#download">Bootstrap</a>并复制到项目的<code>modules/web/web/VAADIN</code>文件夹中.  创建<code>customers.html</code>和<code>customers.js</code>文件，因此该文件夹的内容应如下所示：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="plain">bootstrap.min.css
customers.html
customers.js
jquery-3.1.1.min.js</code></pre>
</div>
</div>
<div class="paragraph">
<p title="customers.html file content:"><code>customers.html</code>文件内容：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="html"><span class="tag">&lt;html&gt;</span>
    <span class="tag">&lt;head&gt;</span>
        <span class="tag">&lt;script</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">"</span><span class="content">text/javascript</span><span class="delimiter">"</span></span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">"</span><span class="content">jquery-3.1.1.min.js</span><span class="delimiter">"</span></span><span class="tag">&gt;</span><span class="tag">&lt;/script&gt;</span>
        <span class="tag">&lt;link</span> <span class="attribute-name">rel</span>=<span class="string"><span class="delimiter">"</span><span class="content">stylesheet</span><span class="delimiter">"</span></span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">"</span><span class="content">bootstrap.min.css</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
    <span class="tag">&lt;/head&gt;</span>
    <span class="tag">&lt;body&gt;</span>
        <span class="tag">&lt;div</span> <span class="attribute-name">style</span>=<span class="string"><span class="delimiter">"</span><span class="key">width</span>: <span class="float">300px</span>; <span class="key">margin</span>: <span class="value">auto</span>;<span class="delimiter">"</span></span><span class="tag">&gt;</span>
            <span class="tag">&lt;h1&gt;</span>Sales<span class="tag">&lt;/h1&gt;</span>

            <span class="tag">&lt;div</span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">"</span><span class="content">loggedInStatus</span><span class="delimiter">"</span></span> <span class="attribute-name">style</span>=<span class="string"><span class="delimiter">"</span><span class="key">display</span>: <span class="value">none</span><span class="delimiter">"</span></span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">"</span><span class="content">alert alert-success</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
                Logged in successfully
            <span class="tag">&lt;/div&gt;</span>
            <span class="tag">&lt;div</span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">"</span><span class="content">loginForm</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
                <span class="tag">&lt;div</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">"</span><span class="content">form-group</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
                    <span class="tag">&lt;label</span> <span class="attribute-name">for</span>=<span class="string"><span class="delimiter">"</span><span class="content">loginField</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>Login:<span class="tag">&lt;/label&gt;</span>
                    <span class="tag">&lt;input</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">"</span><span class="content">text</span><span class="delimiter">"</span></span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">"</span><span class="content">form-control</span><span class="delimiter">"</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">"</span><span class="content">loginField</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
                <span class="tag">&lt;/div&gt;</span>
                <span class="tag">&lt;div</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">"</span><span class="content">form-group</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
                    <span class="tag">&lt;label</span> <span class="attribute-name">for</span>=<span class="string"><span class="delimiter">"</span><span class="content">passwordField</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>Password:<span class="tag">&lt;/label&gt;</span>
                    <span class="tag">&lt;input</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">"</span><span class="content">password</span><span class="delimiter">"</span></span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">"</span><span class="content">form-control</span><span class="delimiter">"</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">"</span><span class="content">passwordField</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
                <span class="tag">&lt;/div&gt;</span>
                <span class="tag">&lt;button</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">"</span><span class="content">submit</span><span class="delimiter">"</span></span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">"</span><span class="content">btn btn-default</span><span class="delimiter">"</span></span> <span class="attribute-name">onclick</span>=<span class="string"><span class="delimiter">"</span>login()<span class="delimiter">"</span></span><span class="tag">&gt;</span>Submit<span class="tag">&lt;/button&gt;</span>
            <span class="tag">&lt;/div&gt;</span>

            <span class="tag">&lt;div</span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">"</span><span class="content">customers</span><span class="delimiter">"</span></span> <span class="attribute-name">style</span>=<span class="string"><span class="delimiter">"</span><span class="key">display</span>: <span class="value">none</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
                <span class="tag">&lt;h2&gt;</span>Customers<span class="tag">&lt;/h2&gt;</span>
                <span class="tag">&lt;ul</span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">"</span><span class="content">customersList</span><span class="delimiter">"</span></span><span class="tag">&gt;</span><span class="tag">&lt;/ul&gt;</span>
            <span class="tag">&lt;/div&gt;</span>
        <span class="tag">&lt;/div&gt;</span>
        <span class="tag">&lt;script</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">"</span><span class="content">text/javascript</span><span class="delimiter">"</span></span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">"</span><span class="content">customers.js</span><span class="delimiter">"</span></span><span class="tag">&gt;</span><span class="tag">&lt;/script&gt;</span>
    <span class="tag">&lt;/body&gt;</span>
<span class="tag">&lt;/html&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p title="customers.js file content:"><code>customers.js</code>文件内容：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> oauthToken = <span class="predefined-constant">null</span>;
<span class="keyword">function</span> <span class="function">login</span>() {
    <span class="keyword">var</span> userLogin = <span class="predefined">$</span>(<span class="string"><span class="delimiter">'</span><span class="content">#loginField</span><span class="delimiter">'</span></span>).val();
    <span class="keyword">var</span> userPassword = <span class="predefined">$</span>(<span class="string"><span class="delimiter">'</span><span class="content">#passwordField</span><span class="delimiter">'</span></span>).val();
    <span class="predefined">$</span>.post({
        <span class="key">url</span>: <span class="string"><span class="delimiter">'</span><span class="content">http://localhost:8080/app/rest/v2/oauth/token</span><span class="delimiter">'</span></span>,
        <span class="key">headers</span>: {
            <span class="key"><span class="delimiter">'</span><span class="content">Authorization</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">Basic Y2xpZW50OnNlY3JldA==</span><span class="delimiter">'</span></span>,
            <span class="key"><span class="delimiter">'</span><span class="content">Content-Type</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">application/x-www-form-urlencoded</span><span class="delimiter">'</span></span>
        },
        <span class="key">dataType</span>: <span class="string"><span class="delimiter">'</span><span class="content">json</span><span class="delimiter">'</span></span>,
        <span class="key">data</span>: {<span class="key">grant_type</span>: <span class="string"><span class="delimiter">'</span><span class="content">password</span><span class="delimiter">'</span></span>, <span class="key">username</span>: userLogin, <span class="key">password</span>: userPassword},
        <span class="function">success</span>: <span class="keyword">function</span> (data) {
            oauthToken = data.access_token;
            <span class="predefined">$</span>(<span class="string"><span class="delimiter">'</span><span class="content">#loggedInStatus</span><span class="delimiter">'</span></span>).show();
            <span class="predefined">$</span>(<span class="string"><span class="delimiter">'</span><span class="content">#loginForm</span><span class="delimiter">'</span></span>).hide();
            loadCustomers();
        }
    })
}

<span class="keyword">function</span> <span class="function">loadCustomers</span>() {
    <span class="predefined">$</span>.get({
        <span class="key">url</span>: <span class="string"><span class="delimiter">'</span><span class="content">http://localhost:8080/app/rest/v2/entities/sales$Customer?view=_local</span><span class="delimiter">'</span></span>,
        <span class="key">headers</span>: {
            <span class="key"><span class="delimiter">'</span><span class="content">Authorization</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">Bearer </span><span class="delimiter">'</span></span> + oauthToken,
            <span class="key"><span class="delimiter">'</span><span class="content">Content-Type</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">application/x-www-form-urlencoded</span><span class="delimiter">'</span></span>
        },
        <span class="function">success</span>: <span class="keyword">function</span> (data) {
            <span class="predefined">$</span>(<span class="string"><span class="delimiter">'</span><span class="content">#customers</span><span class="delimiter">'</span></span>).show();
            <span class="predefined">$</span>.each(data, <span class="keyword">function</span> (i, customer) {
                <span class="predefined">$</span>(<span class="string"><span class="delimiter">'</span><span class="content">#customersList</span><span class="delimiter">'</span></span>).append(<span class="string"><span class="delimiter">"</span><span class="content">&lt;li&gt;</span><span class="delimiter">"</span></span> + customer.name + <span class="string"><span class="delimiter">"</span><span class="content"> (</span><span class="delimiter">"</span></span> + customer.email + <span class="string"><span class="delimiter">"</span><span class="content">)&lt;/li&gt;</span><span class="delimiter">"</span></span>);
            });
        }
    });
}</code></pre>
</div>
</div>
<div class="paragraph">
<p title="Login and password from the user input are sent to the server by the POST request with the Base64-encoded client credentials in the Authorization header as explained in Getting an OAuth Token section. If the authentication is successful, the web page receives an access token value from the server, the token is stored in the oauthToken variable, the loginForm div is hidden and the loggedInStatus div is shown."> 用户输入的登录名和密码由POST请求通过在<code>Authorization</code>标头中具有Base64编码的客户端凭据的POST请求发送到服务器，如" <a href="#rest_api_v2_ex_get_token">获取OAuth令牌"</a>部分中所述.  如果身份验证成功，则网页从服务器接收访问令牌值，该令牌存储在<code>oauthToken</code>变量中， <code>loginForm</code> div隐藏，并显示<code>loggedInStatus</code> div.</p>
</div>
<div class="paragraph">
<p title="To show the list of customers, the request is sent to the server to get the instances of the sales$Customer entity, passing the oauthToken value in the Authorization header.">为了显示客户列表，将请求发送到服务器<a href="#rest_api_v2_ex_get_entities_list">以获取</a> <code>sales$Customer</code>实体<a href="#rest_api_v2_ex_get_entities_list">的实例</a> ，并在<code>Authorization</code>标头中传递<code>oauthToken</code>值.</p>
</div>
<div class="paragraph">
<p title="In case the request is processed successfully, the customers div is shown, and the customersList element is filled with items containing customer names and emails.">如果成功处理了请求，则显示<code>customers</code> div，并用包含客户名和电子邮件的项目填充<code>customersList</code>元素.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../https@doc.cuba-platform.com/restapi-7.1/img/rest_js_1.png" alt="rest js 1">
</div>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../https@doc.cuba-platform.com/restapi-7.1/img/rest_js_2.png" alt="rest js 2">
</div>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_ex_localized_messages"><a class="anchor" href="#rest_api_v2_ex_localized_messages"></a><a class="link" href="#rest_api_v2_ex_localized_messages">4.14. Getting Localized Messages</a></h3>
<div class="paragraph">
<p title="There are methods in the REST API for getting localized messages for entities, their properties and enums.">REST API中有一些方法可以获取实体，其属性和枚举的本地化消息.</p>
</div>
<div class="paragraph">
<p title="For example, to get a list of localized messages for the sec$User entity you have to execute the following GET request:">例如，要获取<code>sec$User</code>实体的本地化消息列表，您必须执行以下<strong>GET</strong>请求：</p>
</div>
<div class="paragraph">
<p><code>http://localhost:8080/app/rest/v2/messages/entities/sec$User</code></p>
</div>
<div class="paragraph">
<p title="An OAuth token must be put in the Authorization header with the Bearer type.">必须将OAuth令牌与<code>Bearer</code>类型一起放入<code>Authorization</code>标头中.</p>
</div>
<div class="paragraph">
<p title="You can explicitly specify the desired locale using the Accept-Language http header.">您可以使用<strong>Accept-Language</strong> http标头明确指定所需的语言环境.</p>
</div>
<div class="paragraph">
<p title="The response will be like this:">响应将是这样的：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">User</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.active</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Active</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.changePasswordAtNextLogon</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Change Password at Next Logon</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.createTs</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Created At</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.createdBy</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Created By</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.deleteTs</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Deleted At</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.deletedBy</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Deleted By</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.email</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Email</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.firstName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">First Name</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.group</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Group</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">ID</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.ipMask</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Permitted IP Mask</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.language</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Language</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.lastName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Last Name</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.login</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Login</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.loginLowerCase</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Login</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.middleName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Middle Name</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.name</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Name</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.password</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Password</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.position</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Position</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.substitutions</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Substitutions</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.timeZone</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Time Zone</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.timeZoneAuto</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Autodetect Time Zone</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.updateTs</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Updated At</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.updatedBy</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Updated By</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.userRoles</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">User Roles</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">sec$User.version</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Version</span><span class="delimiter">"</span></span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p title="To get the localization for enum, use the following URL:">要获取枚举的本地化，请使用以下URL：</p>
</div>
<div class="paragraph">
<p><code>http://localhost:8080/app/rest/v2/messages/enums/com.haulmont.cuba.security.entity.RoleType</code></p>
</div>
<div class="paragraph">
<p title="If you omit the entity name or enum name part in the URL, you’ll get the localization for all entities or enums.">如果在URL中省略实体名称或枚举名称部分，则将获得所有实体或枚举的本地化.</p>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_ex_json_transformations"><a class="anchor" href="#rest_api_v2_ex_json_transformations"></a><a class="link" href="#rest_api_v2_ex_json_transformations">4.15. Data Model Versioning Example</a></h3>
<div class="dlist">
<dl>
<dt class="hdlist1">Entity attribute was renamed</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p title="Let’s suppose that the oldNumber attribute of the sales$Order entity was renamed to newNumber and date was renamed to deliveryDate . In this case transformation config will be like this:"> 假设<code>sales$Order</code>实体的<code>oldNumber</code>属性重命名为<code>newNumber</code>而<code>date</code>重命名为<code>deliveryDate</code> .  在这种情况下，转换配置将如下所示：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="preprocessor">&lt;?xml version="1.0"?&gt;</span>
<span class="tag">&lt;transformations</span> <span class="attribute-name">xmlns</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://schemas.haulmont.com/cuba/rest-json-transformations.xsd</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;transformation</span> <span class="attribute-name">modelVersion</span>=<span class="string"><span class="delimiter">"</span><span class="content">1.0</span><span class="delimiter">"</span></span> <span class="attribute-name">currentEntityName</span>=<span class="string"><span class="delimiter">"</span><span class="content">sales$Order</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;renameAttribute</span> <span class="attribute-name">oldName</span>=<span class="string"><span class="delimiter">"</span><span class="content">oldNumber</span><span class="delimiter">"</span></span> <span class="attribute-name">currentName</span>=<span class="string"><span class="delimiter">"</span><span class="content">newNumber</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;renameAttribute</span> <span class="attribute-name">oldName</span>=<span class="string"><span class="delimiter">"</span><span class="content">date</span><span class="delimiter">"</span></span> <span class="attribute-name">currentName</span>=<span class="string"><span class="delimiter">"</span><span class="content">deliveryDate</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
    <span class="tag">&lt;/transformation&gt;</span>
    ...
<span class="tag">&lt;/transformations&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p title="If the client app needs to work with the old version of the sales$Order entity then it must pass the modelVersion value in the URL parameter:">如果客户端应用程序需要使用旧版本的<code>sales$Order</code>实体，则必须在URL参数中传递<code>modelVersion</code>值：</p>
</div>
<div class="paragraph">
<p><code>http://localhost:8080/app/rest/v2/entities/sales$Order/c838be0a-96d0-4ef4-a7c0-dff348347f93?modelVersion=1.0</code></p>
</div>
<div class="paragraph">
<p title="The following result will be returned:">将返回以下结果：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$Order</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">_instanceName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">00001</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">46322d73-2374-1d65-a5f2-160461da22bf</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">date</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-10-31</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">description</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Vacation order</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">oldNumber</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">00001</span><span class="delimiter">"</span></span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p title="The response JSON contains an oldNumber and date attributes although the entity in the CUBA application has newNumber and deliveryDate attributes.">尽管CUBA应用程序中的实体具有<code>newNumber</code>和<code>deliveryDate</code>属性，但是响应JSON包含<code>oldNumber</code>和<code>date</code>属性.</p>
</div>
</div>
</div>
</dd>
<dt class="hdlist1">Entity name was changed</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p title="Next, let’s imagine, that in some next release of the application a name of the sales$Order entity was also changed. The new name is sales$NewOrder ."> 接下来，让我们想象一下，在该应用程序的下一版本中， <code>sales$Order</code>实体的名称也已更改.  新名称为<code>sales$NewOrder</code> .</p>
</div>
<div class="paragraph">
<p title="Transformation config for version 1.1 will be like this:">版本<code>1.1</code>转换配置将如下所示：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="preprocessor">&lt;?xml version="1.0"?&gt;</span>
<span class="tag">&lt;transformations</span> <span class="attribute-name">xmlns</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://schemas.haulmont.com/cuba/rest-json-transformations.xsd</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;transformation</span> <span class="attribute-name">modelVersion</span>=<span class="string"><span class="delimiter">"</span><span class="content">1.1</span><span class="delimiter">"</span></span> <span class="attribute-name">oldEntityName</span>=<span class="string"><span class="delimiter">"</span><span class="content">sales$Order</span><span class="delimiter">"</span></span> <span class="attribute-name">currentEntityName</span>=<span class="string"><span class="delimiter">"</span><span class="content">sales$NewOrder</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;renameAttribute</span> <span class="attribute-name">oldName</span>=<span class="string"><span class="delimiter">"</span><span class="content">oldNumber</span><span class="delimiter">"</span></span> <span class="attribute-name">currentName</span>=<span class="string"><span class="delimiter">"</span><span class="content">newNumber</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
    <span class="tag">&lt;/transformation&gt;</span>
    ...
<span class="tag">&lt;/transformations&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p title="In addition to the config from the previous example an oldEntityName attribute is added here. It specifies the entity name that was valid for model version 1.1 . The currentEntityName attribute specifies the current entity name."> 除了前面示例的配置之外， <code>oldEntityName</code>此处添加了<code>oldEntityName</code>属性.  它指定对模型版本<code>1.1</code>有效的实体名称.  <code>currentEntityName</code>属性指定当前实体名称.</p>
</div>
<div class="paragraph">
<p title="Although an entity with a name sales$Order doesn’t exist anymore, the following request will work:">尽管名称为<code>sales$Order</code>的实体不再存在，但以下请求将起作用：</p>
</div>
<div class="paragraph">
<p><code>http://localhost:8080/app/rest/v2/entities/sales$Order/c838be0a-96d0-4ef4-a7c0-dff348347f93?modelVersion=1.1</code></p>
</div>
<div class="paragraph">
<p title="The REST API controller will understand that it must search among sales$NewOrder entities and after the entity with given id is found names of the entity and of the newNumber attribute will be replaced in the result JSON:">REST API控制器将理解它必须在<code>sales$NewOrder</code>实体之间进行搜索，并且在找到具有给定ID的实体之后，该实体的名称和<code>newNumber</code>属性的名称将在结果JSON中替换：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$Order</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">_instanceName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">00001</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">46322d73-2374-1d65-a5f2-160461da22bf</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">date</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-10-31</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">description</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Vacation order</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">oldNumber</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">00001</span><span class="delimiter">"</span></span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p title="The client app can also use the old version of data model for entity update and creation.">客户端应用程序还可以使用旧版本的数据模型进行实体更新和创建.</p>
</div>
<div class="paragraph">
<p title="This POST request that uses old entity name and has old JSON in the request body will work:">此使用旧实体名称并且在请求正文中具有旧JSON的<strong>POST</strong>请求将起作用：</p>
</div>
<div class="paragraph">
<p><code>http://localhost:8080/app/rest/v2/entities/sales$Order</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$Order</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">_instanceName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">00001</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">46322d73-2374-1d65-a5f2-160461da22bf</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">date</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-10-31</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">description</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Vacation order</span><span class="delimiter">"</span></span>,
  <span class="key"><span class="delimiter">"</span><span class="content">oldNumber</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">00001</span><span class="delimiter">"</span></span>
}</code></pre>
</div>
</div>
</div>
</div>
</dd>
<dt class="hdlist1">Entity attribute must be removed from JSON</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p title="If some attribute was added to the entity, but the client that works with the old version of data model doesn’t expect this new attribute, then the new attribute can be removed from the result JSON.">如果将某些属性添加到实体，但是使用旧版本数据模型的客户端不需要该新属性，则可以从结果JSON中删除新属性.</p>
</div>
<div class="paragraph">
<p title="Transformation configuration for this case will look like this:">这种情况下的转换配置如下所示：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="preprocessor">&lt;?xml version="1.0"?&gt;</span>
<span class="tag">&lt;transformations</span> <span class="attribute-name">xmlns</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://schemas.haulmont.com/cuba/rest-json-transformations.xsd</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;transformation</span> <span class="attribute-name">modelVersion</span>=<span class="string"><span class="delimiter">"</span><span class="content">1.5</span><span class="delimiter">"</span></span> <span class="attribute-name">currentEntityName</span>=<span class="string"><span class="delimiter">"</span><span class="content">sales$Order</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;toVersion&gt;</span>
            <span class="tag">&lt;removeAttribute</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">discount</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;/toVersion&gt;</span>
    <span class="tag">&lt;/transformation&gt;</span>
    ...
<span class="tag">&lt;/transformations&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p title="Transformation in this config file contains a toVersion tag with a nested removeAttribute command. This means that when the transformation from the current state to specific version is performed (i.e. when you request a list of entities) then a discount attribute must be removed from the result JSON."> 此配置文件中的转换包含带有嵌套<code>removeAttribute</code>命令的<code>toVersion</code>标记.  这意味着当执行从当前状态到特定版本的转换时（即，当您请求实体列表时），必须从结果JSON中删除一个<code>discount</code>属性.</p>
</div>
<div class="paragraph">
<p title="In this case if you perform the request without the modelVersion attribute, the discount attribute will be returned:">在这种情况下，如果执行不带<code>modelVersion</code>属性的请求，则将返回discount属性：</p>
</div>
<div class="paragraph">
<p><code>http://localhost:8080/app/rest/v2/entities/sales$Order/c838be0a-96d0-4ef4-a7c0-dff348347f93</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="json">{
    <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$Order</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">_instanceName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">00001</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">46322d73-2374-1d65-a5f2-160461da22bf</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">deliveryDate</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-10-31</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">description</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Vacation order</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">number</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">00001</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">discount</span><span class="delimiter">"</span></span>: <span class="integer">50</span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p title="If you specify the modelVersion then discount attribute will be removed">如果指定<code>modelVersion</code>则<code>discount</code>属性将被删除</p>
</div>
<div class="paragraph">
<p><code>http://localhost:8080/app/rest/v2/entities/sales$Order/c838be0a-96d0-4ef4-a7c0-dff348347f93?modelVersion=1.1</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="json">{
    <span class="key"><span class="delimiter">"</span><span class="content">_entityName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">sales$Order</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">_instanceName</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">00001</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">id</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">46322d73-2374-1d65-a5f2-160461da22bf</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">deliveryDate</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">2016-10-31</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">description</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Vacation order</span><span class="delimiter">"</span></span>,
    <span class="key"><span class="delimiter">"</span><span class="content">oldNumber</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">00001</span><span class="delimiter">"</span></span>
}</code></pre>
</div>
</div>
</div>
</div>
</dd>
<dt class="hdlist1">Using custom transformer</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p title="You can also create and register a custom JSON transformer. As an example let’s examine the following situation: there was an entity sales$OldOrder that was renamed to sales$NewOrder . This entity has an orderDate field. In the previous version, this date field contained a time part, but in the latest version of the entity, the time part is removed. REST API client that request the entity with an old model version 1.0 expects the date field to have the time part, so the transformer must modify the value in the JSON."> 您还可以创建和注册自定义JSON转换器.  作为示例，让我们检查以下情况：有一个实体<code>sales$OldOrder</code>重命名为<code>sales$NewOrder</code> .  该实体具有<code>orderDate</code>字段.  在先前版本中，此日期字段包含时间部分，但是在实体的最新版本中，该时间部分已删除.  请求具有旧模型版本<code>1.0</code>的实体的REST API客户端期望日期字段具有时间部分，因此转换器必须修改JSON中的值.</p>
</div>
<div class="paragraph">
<p title="First, that’s how the transformer configuration must look like:">首先，这就是变压器配置的外观：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="preprocessor">&lt;?xml version="1.0"?&gt;</span>
<span class="tag">&lt;transformations</span> <span class="attribute-name">xmlns</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://schemas.haulmont.com/cuba/rest-json-transformations.xsd</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>

    <span class="tag">&lt;transformation</span> <span class="attribute-name">modelVersion</span>=<span class="string"><span class="delimiter">"</span><span class="content">1.0</span><span class="delimiter">"</span></span> <span class="attribute-name">oldEntityName</span>=<span class="string"><span class="delimiter">"</span><span class="content">sales$OldOrder</span><span class="delimiter">"</span></span> <span class="attribute-name">currentEntityName</span>=<span class="string"><span class="delimiter">"</span><span class="content">sales$NewOrder</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;custom&gt;</span>
            <span class="tag">&lt;fromVersion</span> <span class="attribute-name">transformerBeanRef</span>=<span class="string"><span class="delimiter">"</span><span class="content">sales_OrderJsonTransformerFromVersion</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
            <span class="tag">&lt;toVersion</span> <span class="attribute-name">transformerBeanRef</span>=<span class="string"><span class="delimiter">"</span><span class="content">sales_OrderJsonTransformerToVersion</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
        <span class="tag">&lt;/custom&gt;</span>
    <span class="tag">&lt;/transformation&gt;</span>

    ...
<span class="tag">&lt;/transformations&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p title="There are a custom element and nested toVersion and fromVersion elements. These elements have a reference to the transformer bean. This means that custom transformer must be registered as a Spring bean. There is one important thing here: a custom transformer may use the RestTransformations platform bean (this bean gives an access to other entities transformers if it is required). But the RestTransformations bean is registered in the Spring context of the REST API servlet, not in the main context of the web application. This means that custom transformer beans must be registered in the REST API Spring context as well."> 有一个<code>custom</code>元素，并且嵌套了<code>toVersion</code>和<code>fromVersion</code>元素.  这些元素引用了转换器bean.  这意味着必须将自定义转换器注册为Spring Bean.  这里有一件重要的事情：自定义转换器可以使用<code>RestTransformations</code>平台Bean（如果需要，此Bean可以访问其他实体转换器）.  但是<code>RestTransformations</code> bean是在REST API servlet的Spring上下文中注册的，而不是在Web应用程序的主要上下文中注册的.  这意味着自定义转换器bean也必须在REST API Spring上下文中注册.</p>
</div>
<div class="paragraph">
<p title="That’s how we can do that.">这就是我们可以做到的.</p>
</div>
<div class="paragraph">
<p title="First, create a rest-dispatcher-spring.xml in the web or portal module (e.g. in package com.company.test ).">首先，在<strong>Web</strong>或<strong>门户</strong>模块（例如，在<code>com.company.test</code>包<code>com.company.test</code> ）中创建<code>rest-dispatcher-spring.xml</code> .</p>
</div>
<div class="paragraph">
<p title="Next, register this file in the app.properties of the web or portal module:">接下来，将此文件注册到Web或门户网站模块的<code>app.properties</code>中：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="properties">cuba.restSpringContextConfig = +com/company/test/rest-dispatcher-spring.xml</code></pre>
</div>
</div>
<div class="paragraph">
<p title="The rest-dispatcher-spring.xml must contain custom transformer bean definitions:"><code>rest-dispatcher-spring.xml</code>必须包含自定义转换器bean定义：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="preprocessor">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="tag">&lt;beans</span> <span class="attribute-name">xmlns</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://www.springframework.org/schema/beans</span><span class="delimiter">"</span></span>
       <span class="attribute-name">xmlns:xsi</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://www.w3.org/2001/XMLSchema-instance</span><span class="delimiter">"</span></span>
       <span class="attribute-name">xsi:schemaLocation</span>=<span class="string"><span class="delimiter">"</span><span class="content">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>

    <span class="tag">&lt;bean</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">sales_OrderJsonTransformerFromVersion</span><span class="delimiter">"</span></span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">"</span><span class="content">com.company.test.transformer.OrderJsonTransformerFromVersion</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>
    <span class="tag">&lt;bean</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">sales_OrderJsonTransformerToVersion</span><span class="delimiter">"</span></span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">"</span><span class="content">com.company.test.transformer.OrderJsonTransformerToVersion</span><span class="delimiter">"</span></span><span class="tag">/&gt;</span>

<span class="tag">&lt;/beans&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p title="The content of the sales_OrderJsonTransformerToVersion transformer is as follows:"><code>sales_OrderJsonTransformerToVersion</code>转换器的内容如下：</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="keyword">package</span> <span class="namespace">com.company.test.transformer</span>;

<span class="keyword">import</span> <span class="include">com.fasterxml.jackson.databind.JsonNode</span>;
<span class="keyword">import</span> <span class="include">com.fasterxml.jackson.databind.ObjectMapper</span>;
<span class="keyword">import</span> <span class="include">com.fasterxml.jackson.databind.node.ObjectNode</span>;
<span class="keyword">import</span> <span class="include">com.google.common.base.Strings</span>;
<span class="keyword">import</span> <span class="include">com.haulmont.restapi.transform.AbstractEntityJsonTransformer</span>;
<span class="keyword">import</span> <span class="include">com.haulmont.restapi.transform.JsonTransformationDirection</span>;

<span class="directive">public</span> <span class="type">class</span> <span class="class">OrderJsonTransformerToVersion</span> <span class="directive">extends</span> AbstractEntityJsonTransformer {

    <span class="directive">public</span> OrderJsonTransformerToVersion() {
        <span class="local-variable">super</span>(<span class="string"><span class="delimiter">"</span><span class="content">sales$NewOrder</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">sales$OldOrder</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">1.0</span><span class="delimiter">"</span></span>, JsonTransformationDirection.TO_VERSION);
    }

    <span class="annotation">@Override</span>
    <span class="directive">protected</span> <span class="type">void</span> doCustomTransformations(ObjectNode rootObjectNode, ObjectMapper objectMapper) {
        JsonNode orderDateNode = rootObjectNode.get(<span class="string"><span class="delimiter">"</span><span class="content">orderDate</span><span class="delimiter">"</span></span>);
        <span class="keyword">if</span> (orderDateNode != <span class="predefined-constant">null</span>) {
            <span class="predefined-type">String</span> orderDateNodeValue = orderDateNode.asText();
            <span class="keyword">if</span> (!Strings.isNullOrEmpty(orderDateNodeValue))
                rootObjectNode.put(<span class="string"><span class="delimiter">"</span><span class="content">orderDate</span><span class="delimiter">"</span></span>, orderDateNodeValue + <span class="string"><span class="delimiter">"</span><span class="content"> 00:00:00.000</span><span class="delimiter">"</span></span>);
        }
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p title="This transformer finds the orderDate node in the JSON object and modifies its value by adding the time part to the value.">该转换器在JSON对象中找到<code>orderDate</code>节点，并通过将时间部分添加到值中来修改其值.</p>
</div>
<div class="paragraph">
<p title="When the sales$OldOrder entity with a data model version 1.0 is requested, the result JSON will contain entities with orderDate fields that contain time part, although it is not stored in the database anymore.">当请求具有数据模型版本<code>1.0</code>的<code>sales$OldOrder</code>实体时，结果JSON将包含带有<code>orderDate</code>字段的实体， <code>orderDate</code>字段包含时间部分，尽管它不再存储在数据库中.</p>
</div>
<div class="paragraph">
<p title="A couple more words about custom transformers. They must implement the EntityJsonTransformer interface. You can also extend the AbstractEntityJsonTransformer class and override its doCustomTransformations method. The AbstractEntityJsonTransformer contains all functionality of the standard transformer."> 关于定制变压器的更多信息.  他们必须实现<code>EntityJsonTransformer</code>接口.  您还可以扩展<code>AbstractEntityJsonTransformer</code>类并覆盖其<code>doCustomTransformations</code>方法.  <code>AbstractEntityJsonTransformer</code>包含标准转换器的所有功能.</p>
</div>
</div>
</div>
</dd>
</dl>
</div>
</div>
<div class="sect2">
<h3 id="rest_api_v2_ex_search_filter"><a class="anchor" href="#rest_api_v2_ex_search_filter"></a><a class="link" href="#rest_api_v2_ex_search_filter">4.16. Using Entities Search Filter</a></h3>
<div class="paragraph">
<p title="REST API allows you to specify ad-hoc search criteria when getting a list of entities.">REST API允许您在获取实体列表时指定临时搜索条件.</p>
</div>
<div class="paragraph">
<p title="Let’s suppose that we have two entities:">假设我们有两个实体：</p>
</div>
<div class="ulist">
<ul>
<li>
<p title="Author that has two fields: lastName and firstName">具有两个字段的<strong>作者</strong> ： <code>lastName</code>和<code>firstName</code></p>
</li>
<li>
<p title="Book with three fields: title (String), author (Author) and publicationYear (Integer)">包含三个字段的<strong>书</strong> ： <code>title</code> （字符串）， <code>author</code> （作者）和<code>publicationYear</code> （整数）</p>
</li>
</ul>
</div>
<div class="paragraph">
<p title="To perform a search with conditions we must use the URL like this:">要使用条件进行搜索，我们必须使用如下URL：</p>
</div>
<div class="paragraph">
<p><code>http://localhost:8080/app/rest/v2/entities/test$Book/search</code></p>
</div>
<div class="paragraph">
<p title="The search conditions must be passed in the filter parameter. It is a JSON object that contains a set of conditions. If the search is performed with the GET request, then the filter parameter must be passed in the URL."> 搜索条件必须在<code>filter</code>参数中传递.  它是一个JSON对象，包含一组条件.  如果使用GET请求执行搜索，则必须在URL中传递<code>filter</code>参数.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Example 1</dt>
<dd>
<p title="We need to find all books that were released in 2007 and have an author with the first name starting with &quot;Alex&quot;. The filter JSON should look like this:"> 我们需要查找2007年发行的所有书籍，并且其作者的名字以" Alex"开头.  过滤器JSON应该如下所示：</p>
</dd>
</dl>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="json">{
    <span class="key"><span class="delimiter">"</span><span class="content">conditions</span><span class="delimiter">"</span></span>: [
        {
            <span class="key"><span class="delimiter">"</span><span class="content">property</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">author.firstName</span><span class="delimiter">"</span></span>,
            <span class="key"><span class="delimiter">"</span><span class="content">operator</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">startsWith</span><span class="delimiter">"</span></span>,
            <span class="key"><span class="delimiter">"</span><span class="content">value</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Alex</span><span class="delimiter">"</span></span>
        },
        {
            <span class="key"><span class="delimiter">"</span><span class="content">property</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">publicationDate</span><span class="delimiter">"</span></span>,
            <span class="key"><span class="delimiter">"</span><span class="content">operator</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">=</span><span class="delimiter">"</span></span>,
            <span class="key"><span class="delimiter">"</span><span class="content">value</span><span class="delimiter">"</span></span>: <span class="integer">2007</span>
        }
    ]
}</code></pre>
</div>
</div>
<div class="paragraph">
<p title="By default, search criteria are applied with the AND operation.">默认情况下，搜索条件与AND操作一起应用.</p>
</div>
<div class="paragraph">
<p title="This example also demonstrates that nested properties are supported (author.firstName ).">此示例还演示了支持嵌套属性（ <code>author.firstName</code> ）.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Example 2</dt>
<dd>
<p title="The next example demonstrates two things: how to execute a search with the POST request and how to use OR groups. In case of POST request all parameters must be passed in the JSON object that is passed in the request body. The search filter must be placed in the object field called filter . All other parameters (view name, limit, etc.) must be placed in fields with corresponding names:"> 下一个示例演示了两件事：如何使用POST请求执行搜索以及如何使用OR组.  如果是POST请求，则必须在请求正文中传递的JSON对象中传递所有参数.  搜索过滤器必须放置在名为<code>filter</code>的对象字段中.  所有其他参数（视图名称，限制等）必须放在具有相应名称的字段中：</p>
</dd>
</dl>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="json">{
  <span class="key"><span class="delimiter">"</span><span class="content">filter</span><span class="delimiter">"</span></span>: {
    <span class="key"><span class="delimiter">"</span><span class="content">conditions</span><span class="delimiter">"</span></span>: [
      {
        <span class="key"><span class="delimiter">"</span><span class="content">group</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">OR</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">conditions</span><span class="delimiter">"</span></span>: [
          {
            <span class="key"><span class="delimiter">"</span><span class="content">property</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">author.lastName</span><span class="delimiter">"</span></span>,
            <span class="key"><span class="delimiter">"</span><span class="content">operator</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">contains</span><span class="delimiter">"</span></span>,
            <span class="key"><span class="delimiter">"</span><span class="content">value</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Stev</span><span class="delimiter">"</span></span>
          },
          {
            <span class="key"><span class="delimiter">"</span><span class="content">property</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">author.lastName</span><span class="delimiter">"</span></span>,
            <span class="key"><span class="delimiter">"</span><span class="content">operator</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">=</span><span class="delimiter">"</span></span>,
            <span class="key"><span class="delimiter">"</span><span class="content">value</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">Dumas</span><span class="delimiter">"</span></span>
          }
        ]
      },
      {
        <span class="key"><span class="delimiter">"</span><span class="content">property</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">publicationDate</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">operator</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">=</span><span class="delimiter">"</span></span>,
        <span class="key"><span class="delimiter">"</span><span class="content">in</span><span class="delimiter">"</span></span>: [<span class="integer">2007</span>, <span class="integer">2008</span>]
      }
    ]
  },
  <span class="key"><span class="delimiter">"</span><span class="content">view</span><span class="delimiter">"</span></span>: <span class="string"><span class="delimiter">"</span><span class="content">book-view</span><span class="delimiter">"</span></span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p title="In this example, conditions collection contains not only condition objects, but also an OR group. So the result search criterion will be:"> 在此示例中， <code>conditions</code>集合不仅包含条件对象，还包含一个OR组.  因此，结果搜索标准将是：</p>
</div>
<div class="literalblock">
<div class="content">
<pre>((author.lastName contains Stev) OR (author.lastName = Duma) AND (publicationDate in [2007, 2008]))</pre>
</div>
</div>
<div class="paragraph">
<p title="Notice that the view parameter is also passed in the request body.">请注意， <code>view</code>参数也在请求正文中传递.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<script async src="../../https@pagead2.googlesyndication.com\pagead\js\f.txt"></script>
<ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6890694312814945" data-ad-slot="3716282951"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script><h2 id="app_properties"><a class="anchor" href="#app_properties"></a><a class="link" href="#app_properties">Appendix A: Application Properties</a></h2>
<div class="sectionbody">
<div id="cuba.rest.allowedOrigins" class="dlist">
<dl>
<dt class="hdlist1">cuba.rest.allowedOrigins</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p title="Defines a comma-separated list of origins that can access the ."> 定义一个逗号分隔的来源列表，该列表可以访问 <a href="#rest_api_v2"></a>  .</p>
</div>
<div class="paragraph">
<p title="Default value: *">默认值： <code>*</code></p>
</div>
<div class="paragraph">
<p title="Used in the Web Client and Web Portal blocks.">在Web Client和Web Portal块中使用.</p>
</div>
</div>
</div>
</dd>
</dl>
</div>
<div id="cuba.rest.anonymousEnabled" class="dlist">
<dl>
<dt class="hdlist1">cuba.rest.anonymousEnabled</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p title="Enables an anonymous access to the endpoints."> 启用匿名访问 <a href="#rest_api_v2"></a>  端点.</p>
</div>
<div class="paragraph">
<p title="Default value: false">默认值： <code>false</code></p>
</div>
<div class="paragraph">
<p title="Used in the Web Client and Web Portal blocks.">在Web Client和Web Portal块中使用.</p>
</div>
</div>
</div>
</dd>
</dl>
</div>
<div id="cuba.rest.client.authorizedGrantTypes" class="dlist">
<dl>
<dt class="hdlist1">cuba.rest.client.authorizedGrantTypes</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p title="Defines a list of supported grant types for the default REST API client. To disable refresh token support remove the refresh_token item from the value."> 定义默认REST API客户端支持的授权类型的列表.  要禁用刷新令牌支持，请从值中删除<code>refresh_token</code>项目.</p>
</div>
<div class="paragraph">
<p title="Default value: password,external,refresh_token">默认值： <code>password,external,refresh_token</code></p>
</div>
<div class="paragraph">
<p title="Used in the Web Client and Web Portal blocks.">在Web Client和Web Portal块中使用.</p>
</div>
</div>
</div>
</dd>
</dl>
</div>
<div id="cuba.rest.client.id" class="dlist">
<dl>
<dt class="hdlist1">cuba.rest.client.id</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p title="Defines an identifier of the REST API client. Client, in this case, is not a platform user, but an application (some web portal or mobile app) that uses . Client credentials are used for basic authentication when accessing the REST API token endpoint."> 定义REST API客户端的标识符.  在这种情况下，客户端不是平台用户，而是使用以下内容的应用程序（某些Web门户或移动应用程序） <a href="#rest_api_v2"></a>  .  访问REST API令牌端点时，客户端凭证用于基本身份验证.</p>
</div>
<div class="paragraph">
<p title="Default value: client">默认值： <code>client</code></p>
</div>
<div class="paragraph">
<p title="Used in the Web Client and Web Portal blocks.">在Web Client和Web Portal块中使用.</p>
</div>
</div>
</div>
</dd>
</dl>
</div>
<div id="cuba.rest.client.secret" class="dlist">
<dl>
<dt class="hdlist1">cuba.rest.client.secret</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p title="Defines a password for the REST API client. Client, in this case, is not a platform user, but an application (some web portal or mobile app) that uses . Client credentials are used for basic authentication when accessing the REST API token endpoint. The application property value in addition to the actual password value (e.g. secret ) must contain an identifier of the PasswordEncoder (e.g. {noop} )."> 定义REST API客户端的密码.  在这种情况下，客户端不是平台用户，而是使用以下内容的应用程序（某些Web门户或移动应用程序） <a href="#rest_api_v2"></a>  .  访问REST API令牌端点时，客户端凭证用于基本身份验证.  除了实际的密码值（例如<code>secret</code> ）之外，应用程序属性值还必须包含<code>PasswordEncoder</code>的标识符（例如<code>{noop}</code> ）.</p>
</div>
<div class="paragraph">
<p title="Default value: {noop}secret">默认值： <code>{noop}secret</code></p>
</div>
<div class="paragraph">
<p title="Used in the Web Client and Web Portal blocks.">在Web Client和Web Portal块中使用.</p>
</div>
</div>
</div>
</dd>
</dl>
</div>
<div id="cuba.rest.client.tokenExpirationTimeSec" class="dlist">
<dl>
<dt class="hdlist1">cuba.rest.client.tokenExpirationTimeSec</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p title="Defines a access token expiration timeout for the default client in seconds."> 定义一个 <a href="#rest_api_v2"></a>  默认客户端的访问令牌到期超时（以秒为单位）.</p>
</div>
<div class="paragraph">
<p title="Default value: 43200 (12 hours)">默认值： <code>43200</code> （12小时）</p>
</div>
<div class="paragraph">
<p title="Used in the Web Client and Web Portal blocks.">在Web Client和Web Portal块中使用.</p>
</div>
</div>
</div>
</dd>
</dl>
</div>
<div id="cuba.rest.client.refreshTokenExpirationTimeSec" class="dlist">
<dl>
<dt class="hdlist1">cuba.rest.client.refreshTokenExpirationTimeSec</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p title="Defines a refresh token expiration timeout for the default client in seconds."> 定义一个 <a href="#rest_api_v2"></a>  刷新默认客户端的令牌到期超时（以秒为单位）.</p>
</div>
<div class="paragraph">
<p title="Default value: 31536000 (365 days)">预设值： <code>31536000</code> （365天）</p>
</div>
<div class="paragraph">
<p title="Used in the Web Client and Web Portal blocks.">在Web Client和Web Portal块中使用.</p>
</div>
</div>
</div>
</dd>
</dl>
</div>
<div id="cuba.rest.deleteExpiredTokensCron" class="dlist">
<dl>
<dt class="hdlist1">cuba.rest.deleteExpiredTokensCron</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p title="Specifies cron expression for scheduled removing of expired tokens from the database.">指定用于计划从数据库中删除过期令牌的cron表达式.</p>
</div>
<div class="paragraph">
<p title="Default value: 0 0 3 * * ?">默认值： <code>0 0 3 * * ?</code></p>
</div>
<div class="paragraph">
<p title="Used in the Middleware block.">在中间件模块中使用.</p>
</div>
</div>
</div>
</dd>
</dl>
</div>
<div id="cuba.rest.jsonTransformationConfig" class="dlist">
<dl>
<dt class="hdlist1">cuba.rest.jsonTransformationConfig</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p title="Additive property defining a file that contains JSON transformation configurations used by the when the client needs data in format of some particular data model version."> 定义文件的<a href="#additive_app_properties">添加</a>属性，该文件包含由JSON使用的JSON转换配置 <a href="#rest_api_v2"></a>  当客户端需要某种特定数据模型版本格式的数据时.</p>
</div>
<div class="paragraph">
<p title="The file is loaded using the Resources interface, so it can be located in classpath or in the configuration directory .">该文件是使用<a href="#resources">Resources</a>接口加载的，因此可以位于classpath或<a href="#conf_dir">配置目录中</a> .</p>
</div>
<div class="paragraph">
<p title="The XSD of the file is available at {xsd_url}/rest-json-transformations.xsd.">该文件的XSD位于{xsd_url} /rest-json-transformations.xsd.</p>
</div>
<div class="paragraph">
<p title="Default value: none">默认值：无</p>
</div>
<div class="paragraph">
<p>Example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="properties">cuba.rest.jsonTransformationConfig = +com/company/sample/json-transformations.xml</code></pre>
</div>
</div>
<div class="paragraph">
<p title="Used in the Web Client and Web Portal blocks.">在Web Client和Web Portal块中使用.</p>
</div>
</div>
</div>
</dd>
</dl>
</div>
<div id="cuba.rest.maxUploadSize" class="dlist">
<dl>
<dt class="hdlist1">cuba.rest.maxUploadSize</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p title="Maximum file size (in bytes) that can be uploaded with the ."> 可以通过以下方式上传的最大文件大小（以字节为单位） <a href="#rest_api_v2"></a>  .</p>
</div>
<div class="paragraph">
<p title="Default value: 20971520 (20 Mb)">默认值： <code>20971520</code> （20 Mb）</p>
</div>
<div class="paragraph">
<p title="Used in the Web Client and Web Portal blocks.">在Web Client和Web Portal块中使用.</p>
</div>
</div>
</div>
</dd>
</dl>
</div>
<div id="cuba.rest.optimisticLockingEnabled" class="dlist">
<dl>
<dt class="hdlist1">cuba.rest.optimisticLockingEnabled</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p title="Enables optimistic locking of Versioned entities if the version attribute is provided in JSON.">如果JSON中提供了<code>version</code>属性，则启用乐观锁定<code>Versioned</code>实体.</p>
</div>
<div class="paragraph">
<p title="Default value: false">默认值： <code>false</code></p>
</div>
<div class="paragraph">
<p title="Used in the Web Client and Web Portal blocks.">在Web Client和Web Portal块中使用.</p>
</div>
</div>
</div>
</dd>
</dl>
</div>
<div id="cuba.rest.requiresSecurityToken" class="dlist">
<dl>
<dt class="hdlist1">cuba.rest.requiresSecurityToken</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p title="If true, a special system attribute is included in JSON for loaded entities, and the same attribute is expected to be passed back to REST when saving the entities. See details in 集合属性的安全性约束 ."> 如果为true，则在JSON中为已加载的实体包含一个特殊的系统属性，并且在保存实体时，希望将相同的属性传递回REST.  请参阅<a href="#rest_api_v2_security_constraints">"集合属性的安全性约束"中的</a>详细信息.</p>
</div>
<div class="paragraph">
<p title="Default value: false">默认值： <code>false</code></p>
</div>
<div class="paragraph">
<p title="Used in the Web Client and Web Portal blocks.">在Web Client和Web Portal块中使用.</p>
</div>
</div>
</div>
</dd>
</dl>
</div>
<div id="cuba.rest.reuseRefreshToken" class="dlist">
<dl>
<dt class="hdlist1">cuba.rest.reuseRefreshToken</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p title="Specifies whether a refresh token may be reused. If set to false then when an access token is requested using the refresh token, a new refresh token will be issued, and the old refresh token will be revoked."> 指定是否可以重用刷新令牌.  如果设置为<code>false</code>则当使用刷新令牌请求访问令牌时，将发出新的刷新令牌，而旧的刷新令牌将被吊销.</p>
</div>
<div class="paragraph">
<p title="Default value: true">默认值： <code>true</code></p>
</div>
<div class="paragraph">
<p title="Used in the Web Client and Web Portal blocks.">在Web Client和Web Portal块中使用.</p>
</div>
</div>
</div>
</dd>
</dl>
</div>
<div id="cuba.rest.servicesConfig" class="dlist">
<dl>
<dt class="hdlist1">cuba.rest.servicesConfig</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p title="Additive property defining a file that contains a list of services available for application calls."> 定义文件的<a href="#additive_app_properties">附加</a>属性，该文件包含可用于应用程序的<a href="#services">服务</a>列表 <a href="#rest_api_v2"></a>  调用.</p>
</div>
<div class="paragraph">
<p title="The file is loaded using the Resources interface, so it can be located in classpath or in the configuration directory .">该文件是使用<a href="#resources">Resources</a>接口加载的，因此可以位于classpath或<a href="#conf_dir">配置目录中</a> .</p>
</div>
<div class="paragraph">
<p title="The XSD of the file is available at {xsd_url}/rest-services-v2.xsd.">该文件的XSD位于{xsd_url} /rest-services-v2.xsd.</p>
</div>
<div class="paragraph">
<p title="Default value: none">默认值：无</p>
</div>
<div class="paragraph">
<p>Example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="properties">cuba.rest.servicesConfig = +com/company/sample/app-rest-services.xml</code></pre>
</div>
</div>
<div class="paragraph">
<p title="Used in the Web Client and Web Portal blocks.">在Web Client和Web Portal块中使用.</p>
</div>
</div>
</div>
</dd>
</dl>
</div>
<div id="cuba.rest.storeTokensInDb" class="dlist">
<dl>
<dt class="hdlist1">cuba.rest.storeTokensInDb</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p title="Enables storing of REST API security tokens in the database. By default, tokens are stored in memory only."> 允许在数据库中存储REST API安全令牌.  默认情况下，令牌仅存储在内存中.</p>
</div>
<div class="paragraph">
<p title="Stored in the database.">存储在数据库中.</p>
</div>
<div class="paragraph">
<p>Interface: <code>ServerConfig</code></p>
</div>
<div class="paragraph">
<p title="Default value: false">默认值： <code>false</code></p>
</div>
<div class="paragraph">
<p title="Used in the Middleware block.">在中间件模块中使用.</p>
</div>
</div>
</div>
</dd>
</dl>
</div>
<div id="cuba.rest.tokenMaskingEnabled" class="dlist">
<dl>
<dt class="hdlist1">cuba.rest.tokenMaskingEnabled</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>Specifies whether REST API token values should be masked in application logs.</p>
</div>
<div class="paragraph">
<p title="Default value: true">默认值： <code>true</code></p>
</div>
<div class="paragraph">
<p title="Used in the Web Client and Web Portal blocks.">在Web Client和Web Portal块中使用.</p>
</div>
</div>
</div>
</dd>
</dl>
</div>
<div id="cuba.rest.queriesConfig" class="dlist">
<dl>
<dt class="hdlist1">cuba.rest.queriesConfig</dt>
<dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p title="Additive property defining a file that contains a list of JPQL queries available for application calls."> 定义文件的<a href="#additive_app_properties">附加</a>属性，该文件包含可用于应用程序的JPQL查询列表 <a href="#rest_api_v2"></a>  调用.</p>
</div>
<div class="paragraph">
<p title="The file is loaded using the Resources interface, so it can be located in classpath or in the 配置目录 .">该文件是使用<a href="#resources">Resources</a>接口加载的，因此可以位于classpath或<a href="#conf_dir">配置目录中</a> .</p>
</div>
<div class="paragraph">
<p title="The XSD of the file is available at {xsd_url}/rest-queries.xsd.">该文件的XSD位于{xsd_url} /rest-queries.xsd.</p>
</div>
<div class="paragraph">
<p title="Default value: none">默认值：无</p>
</div>
<div class="paragraph">
<p>Example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="properties">cuba.rest.queriesConfig = +com/company/sample/app-rest-queries.xml</code></pre>
</div>
</div>
<div class="paragraph">
<p title="Used in the Web Client and Web Portal blocks.">在Web Client和Web Portal块中使用.</p>
</div>
</div>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
<div id="footer">
<div id="footer-text" title="Version 7.1 Last updated 2019-07-03 18:28:04 +0400">
 版本7.1 <br>  最后更新时间2019-07-03 18:28:04 +0400
</div>
</div>
<script>
$('a').each(function() {
    var path = new RegExp('/' + window.location.host + '../../https@s0doc0cuba-platform0com.icopy.site\');
    if(!path.test(this.href)) {
        $(this).click(function(event) {
            event.preventDefault();
            event.stopPropagation();
            window.open(this.href, '_blank');
        });
    }
});
</script>

<style>@keyframes flash{from{opacity:0;} to{opacity:1;}} #backToMainSite{animation:flash .8s linear infinite;}</style><span id="backToMainSite" style="position:fixed;right:20px;bottom:10px;"><a href="../../https@icopy.site/default.htm"><h3><span style="font-style: italic">by&nbsp;&nbsp;</span>ICOPY.SITE</h3></a></span>
</body></html>